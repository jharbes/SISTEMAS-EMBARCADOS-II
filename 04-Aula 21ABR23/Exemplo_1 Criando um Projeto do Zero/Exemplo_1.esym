D G "__PCH__" 0 0 ""5.099""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""3-Jun-22""
D G "__TIME__" 0 0 ""18:37:38""
D G "_UNICODE" 0 0 ""?""
D G "__EVAL" 0 0 ""?"" "Standard Header file for the PIC18F4520 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
F N "set_tris_a" 1 43 ""
V L "value" 1 43 "int8" `55 
F B "set_tris_a" 1 43 "void(int8 value)" `54 
F N "set_tris_b" 1 44 ""
V L "value" 1 44 "int8" `57 
F B "set_tris_b" 1 44 "void(int8 value)" `56 
F N "set_tris_c" 1 45 ""
V L "value" 1 45 "int8" `59 
F B "set_tris_c" 1 45 "void(int8 value)" `58 
F N "set_tris_d" 1 46 ""
V L "value" 1 46 "int8" `61 
F B "set_tris_d" 1 46 "void(int8 value)" `60 
F N "set_tris_e" 1 47 ""
V L "value" 1 47 "int8" `63 
F B "set_tris_e" 1 47 "void(int8 value)" `62 
F N "get_tris_a" 1 48 ""
F B "get_tris_a" 1 48 "int8()" `64 
F N "get_tris_b" 1 49 ""
F B "get_tris_b" 1 49 "int8()" `65 
F N "get_tris_c" 1 50 ""
F B "get_tris_c" 1 50 "int8()" `66 
F N "get_tris_d" 1 51 ""
F B "get_tris_d" 1 51 "int8()" `67 
F N "get_tris_e" 1 52 ""
F B "get_tris_e" 1 52 "int8()" `68 
F N "output_a" 1 53 ""
V L "value" 1 53 "int8" `70 
F B "output_a" 1 53 "void(int8 value)" `69 
F N "output_b" 1 54 ""
V L "value" 1 54 "int8" `72 
F B "output_b" 1 54 "void(int8 value)" `71 
F N "output_c" 1 55 ""
V L "value" 1 55 "int8" `74 
F B "output_c" 1 55 "void(int8 value)" `73 
F N "output_d" 1 56 ""
V L "value" 1 56 "int8" `76 
F B "output_d" 1 56 "void(int8 value)" `75 
F N "output_e" 1 57 ""
V L "value" 1 57 "int8" `78 
F B "output_e" 1 57 "void(int8 value)" `77 
F N "input_a" 1 58 ""
F B "input_a" 1 58 "int8()" `79 
F N "input_b" 1 59 ""
F B "input_b" 1 59 "int8()" `80 
F N "input_c" 1 60 ""
F B "input_c" 1 60 "int8()" `81 
F N "input_d" 1 61 ""
F B "input_d" 1 61 "int8()" `82 
F N "input_e" 1 62 ""
F B "input_e" 1 62 "int8()" `83 
F N "input_change_a" 1 63 ""
F B "input_change_a" 1 63 "int8()" `84 
F N "input_change_b" 1 64 ""
F B "input_change_b" 1 64 "int8()" `85 
F N "input_change_c" 1 65 ""
F B "input_change_c" 1 65 "int8()" `86 
F N "input_change_d" 1 66 ""
F B "input_change_d" 1 66 "int8()" `87 
F N "input_change_e" 1 67 ""
F B "input_change_e" 1 67 "int8()" `88 
F N "port_b_pullups" 1 68 ""
V L "value" 1 68 "int8" `90 
F B "port_b_pullups" 1 68 "void(int8 value)" `89 
F N "input" 1 69 ""
V L "pin" 1 69 "int16" `92 
F B "input" 1 69 "int8(int16 pin)" `91 
F N "input_state" 1 70 ""
V L "pin" 1 70 "int16" `94 
F B "input_state" 1 70 "int8(int16 pin)" `93 
F N "output_low" 1 71 ""
V L "pin" 1 71 "int16" `96 
F B "output_low" 1 71 "void(int16 pin)" `95 
F N "output_high" 1 72 ""
V L "pin" 1 72 "int16" `98 
F B "output_high" 1 72 "void(int16 pin)" `97 
F N "output_toggle" 1 73 ""
V L "pin" 1 73 "int16" `100 
F B "output_toggle" 1 73 "void(int16 pin)" `99 
F N "output_bit" 1 74 ""
V L "pin" 1 74 "int16" `102 
V L "level" 1 74 "int8" `103 
F B "output_bit" 1 74 "void(int16 pin,int8 level)" `101 
F N "output_float" 1 75 ""
V L "pin" 1 75 "int16" `105 
F B "output_float" 1 75 "void(int16 pin)" `104 
F N "output_drive" 1 76 ""
V L "pin" 1 76 "int16" `107 
F B "output_drive" 1 76 "void(int16 pin)" `106  "Constants used to identify pins in the above are:"
D G "PIN_A0" 1 80 "31744"
D G "PIN_A1" 1 81 "31745"
D G "PIN_A2" 1 82 "31746"
D G "PIN_A3" 1 83 "31747"
D G "PIN_A4" 1 84 "31748"
D G "PIN_A5" 1 85 "31749"
D G "PIN_A6" 1 86 "31750"
D G "PIN_A7" 1 87 "31751"
D G "PIN_B0" 1 89 "31752"
D G "PIN_B1" 1 90 "31753"
D G "PIN_B2" 1 91 "31754"
D G "PIN_B3" 1 92 "31755"
D G "PIN_B4" 1 93 "31756"
D G "PIN_B5" 1 94 "31757"
D G "PIN_B6" 1 95 "31758"
D G "PIN_B7" 1 96 "31759"
D G "PIN_C0" 1 98 "31760"
D G "PIN_C1" 1 99 "31761"
D G "PIN_C2" 1 100 "31762"
D G "PIN_C3" 1 101 "31763"
D G "PIN_C4" 1 102 "31764"
D G "PIN_C5" 1 103 "31765"
D G "PIN_C6" 1 104 "31766"
D G "PIN_C7" 1 105 "31767"
D G "PIN_D0" 1 107 "31768"
D G "PIN_D1" 1 108 "31769"
D G "PIN_D2" 1 109 "31770"
D G "PIN_D3" 1 110 "31771"
D G "PIN_D4" 1 111 "31772"
D G "PIN_D5" 1 112 "31773"
D G "PIN_D6" 1 113 "31774"
D G "PIN_D7" 1 114 "31775"
D G "PIN_E0" 1 116 "31776"
D G "PIN_E1" 1 117 "31777"
D G "PIN_E2" 1 118 "31778"
D G "PIN_E3" 1 119 "31779"
D G "FALSE" 1 122 "0"
D G "TRUE" 1 123 "1"
D G "BYTE" 1 125 "int8"
D G "BOOLEAN" 1 126 "int1"
D G "getc" 1 128 "getch"
D G "fgetc" 1 129 "getch"
D G "getchar" 1 130 "getch"
D G "putc" 1 131 "putchar"
D G "fputc" 1 132 "putchar"
D G "fgets" 1 133 "gets"
D G "fputs" 1 134 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
F N "restart_cause" 1 139 ""
F B "restart_cause" 1 139 "int8()" `108 
F N "reset_cpu" 1 140 ""
F B "reset_cpu" 1 140 "void()" `109 
F N "sleep" 1 141 ""
F B "sleep" 1 141 "void()" `110 
F N "sleep" 1 142 ""
V L "type" 1 142 "int8" `112 
F B "sleep" 1 142 "void(int8 type)" `111  "Constants returned from RESTART_CAUSE() are:"
D G "WDT_TIMEOUT" 1 144 "7"
D G "MCLR_FROM_SLEEP" 1 145 "11"
D G "MCLR_FROM_RUN" 1 146 "15"
D G "NORMAL_POWER_UP" 1 147 "12"
D G "BROWNOUT_RESTART" 1 148 "14"
D G "WDT_FROM_SLEEP" 1 149 "3"
D G "RESET_INSTRUCTION" 1 150 "0"
D G "SLEEP_FULL" 1 153 "0" "Default"
D G "SLEEP_IDLE" 1 154 "1" "Clock and peripherals don't stop"
c L "sleep" 1 3 5 "FUNCTION"
F N "setup_timer_0" 1 161 ""
V L "mode" 1 161 "int8" `114 
F B "setup_timer_0" 1 161 "void(int8 mode)" `113 
F N "set_timer0" 1 162 ""
V L "value" 1 162 "int16" `116 
F B "set_timer0" 1 162 "void(int16 value)" `115 
F N "get_timer0" 1 163 ""
F B "get_timer0" 1 163 "int16()" `117 
F N "setup_counters" 1 164 ""
V L "mode" 1 164 "int8" `119 
V L "prescaler" 1 164 "int8" `120 
F B "setup_counters" 1 164 "void(int8 mode,int8 prescaler)" `118 
F N "set_rtcc" 1 165 ""
V L "value" 1 165 "int16" `122 
F B "set_rtcc" 1 165 "void(int16 value)" `121 
F N "get_rtcc" 1 166 ""
F B "get_rtcc" 1 166 "int16()" `123  "Constants used for SETUP_TIMER_0() are:"
D G "T0_INTERNAL" 1 168 "0"
D G "T0_EXT_L_TO_H" 1 169 "32"
D G "T0_EXT_H_TO_L" 1 170 "48"
D G "T0_DIV_1" 1 172 "8"
D G "T0_DIV_2" 1 173 "0"
D G "T0_DIV_4" 1 174 "1"
D G "T0_DIV_8" 1 175 "2"
D G "T0_DIV_16" 1 176 "3"
D G "T0_DIV_32" 1 177 "4"
D G "T0_DIV_64" 1 178 "5"
D G "T0_DIV_128" 1 179 "6"
D G "T0_DIV_256" 1 180 "7"
D G "T0_OFF" 1 182 "0x80"
D G "T0_8_BIT" 1 184 "0x40"
D G "RTCC_INTERNAL" 1 188 "0"
D G "RTCC_EXT_L_TO_H" 1 189 "32"
D G "RTCC_EXT_H_TO_L" 1 190 "48"
D G "RTCC_DIV_1" 1 191 "8"
D G "RTCC_DIV_2" 1 192 "0"
D G "RTCC_DIV_4" 1 193 "1"
D G "RTCC_DIV_8" 1 194 "2"
D G "RTCC_DIV_16" 1 195 "3"
D G "RTCC_DIV_32" 1 196 "4"
D G "RTCC_DIV_64" 1 197 "5"
D G "RTCC_DIV_128" 1 198 "6"
D G "RTCC_DIV_256" 1 199 "7"
D G "RTCC_OFF" 1 200 "0x80"
D G "RTCC_8_BIT" 1 201 "0x40"
c L "get_rtcc" 1 3 8 "FUNCTION"
F N "setup_wdt" 1 212 ""
V L "mode" 1 212 "int16" `125 
F B "setup_wdt" 1 212 "void(int16 mode)" `124 
F N "restart_wdt" 1 213 ""
F B "restart_wdt" 1 213 "void()" `126  "Constants used for SETUP_WDT() are:"
D G "WDT_ON" 1 215 "0x100"
D G "WDT_OFF" 1 216 "0"
D G "WDT_4MS" 1 218 "0x300"
D G "WDT_8MS" 1 219 "0x500"
D G "WDT_16MS" 1 220 "0x700"
D G "WDT_32MS" 1 221 "0x900"
D G "WDT_64MS" 1 222 "0xB00"
D G "WDT_128MS" 1 223 "0xD00"
D G "WDT_256MS" 1 224 "0xF00"
D G "WDT_512MS" 1 225 "0x1100"
D G "WDT_1S" 1 226 "0x1300"
D G "WDT_2S" 1 227 "0x1500"
D G "WDT_4S" 1 228 "0x1700"
D G "WDT_8S" 1 229 "0x1900"
D G "WDT_16S" 1 230 "0x1B00"
D G "WDT_32S" 1 231 "0x1D00"
D G "WDT_64S" 1 232 "0x1F00"
D G "WDT_128S" 1 233 "0x2100"
c L "restart_wdt" 1 3 3 "FUNCTION"
F N "setup_timer_1" 1 238 ""
V L "mode" 1 238 "int16" `128 
F B "setup_timer_1" 1 238 "void(int16 mode)" `127 
F N "get_timer1" 1 239 ""
F B "get_timer1" 1 239 "int16()" `129 
F N "set_timer1" 1 240 ""
V L "value" 1 240 "int16" `131 
F B "set_timer1" 1 240 "void(int16 value)" `130  "Constants used for SETUP_TIMER_1() are:"
D G "T1_DISABLED" 1 243 "0"
D G "T1_INTERNAL" 1 244 "0x85"
D G "T1_EXTERNAL" 1 245 "0x87"
D G "T1_EXTERNAL_SYNC" 1 246 "0x83"
D G "T1_CLK_OUT" 1 248 "8"
D G "T1_DIV_BY_1" 1 250 "0"
D G "T1_DIV_BY_2" 1 251 "0x10"
D G "T1_DIV_BY_4" 1 252 "0x20"
D G "T1_DIV_BY_8" 1 253 "0x30"
c L "set_timer1" 1 3 3 "FUNCTION"
F N "setup_timer_2" 1 258 ""
V L "mode" 1 258 "int8" `133 
V L "period" 1 258 "int8" `134 
V L "postscale" 1 258 "int8" `135 
F B "setup_timer_2" 1 258 "void(int8 mode,int8 period,int8 postscale)" `132 
F N "get_timer2" 1 259 ""
F B "get_timer2" 1 259 "int8()" `136 
F N "set_timer2" 1 260 ""
V L "value" 1 260 "int8" `138 
F B "set_timer2" 1 260 "void(int8 value)" `137  "Constants used for SETUP_TIMER_2() are:"
D G "T2_DISABLED" 1 262 "0"
D G "T2_DIV_BY_1" 1 263 "4"
D G "T2_DIV_BY_4" 1 264 "5"
D G "T2_DIV_BY_16" 1 265 "6"
c L "set_timer2" 1 3 3 "FUNCTION"
F N "setup_timer_3" 1 270 ""
V L "mode" 1 270 "int16" `140 
F B "setup_timer_3" 1 270 "void(int16 mode)" `139 
F N "get_timer3" 1 271 ""
F B "get_timer3" 1 271 "int16()" `141 
F N "set_timer3" 1 272 ""
V L "value" 1 272 "int16" `143 
F B "set_timer3" 1 272 "void(int16 value)" `142  "Constants used for SETUP_TIMER_3() are:"
D G "T3_DISABLED" 1 275 "0"
D G "T3_INTERNAL" 1 276 "0x85"
D G "T3_EXTERNAL" 1 277 "0x87"
D G "T3_EXTERNAL_SYNC" 1 278 "0x83"
D G "T3_DIV_BY_1" 1 280 "0"
D G "T3_DIV_BY_2" 1 281 "0x10"
D G "T3_DIV_BY_4" 1 282 "0x20"
D G "T3_DIV_BY_8" 1 283 "0x30"
D G "T3_CCP1_TO_2" 1 286 "0x48"
D G "T3_CCP2" 1 287 "0x8"
c L "set_timer3" 1 3 4 "FUNCTION"
F N "setup_ccp1" 1 293 ""
V L "mode" 1 293 "int32" `145 
F B "setup_ccp1" 1 293 "void(int32 mode)" `144 
F N "setup_ccp1" 1 294 ""
V L "mode" 1 294 "int32" `147 
V L "pwm" 1 294 "int8" `148 
F B "setup_ccp1" 1 294 "void(int32 mode,int8 pwm)" `146 
F N "set_pwm1_duty" 1 295 ""
V L "value" 1 295 "int8" `150 
F B "set_pwm1_duty" 1 295 "void(int8 value)" `149 
F N "set_pwm1_duty" 1 296 ""
V L "value" 1 296 "int16" `152 
F B "set_pwm1_duty" 1 296 "void(int16 value)" `151  "Constants used for SETUP_CCPx() are:"
D G "CCP_OFF" 1 298 "0"
D G "CCP_CAPTURE_FE" 1 299 "0x04"
D G "CCP_CAPTURE_RE" 1 300 "0x05"
D G "CCP_CAPTURE_DIV_4" 1 301 "0x06"
D G "CCP_CAPTURE_DIV_16" 1 302 "0x07"
D G "CCP_COMPARE_SET_ON_MATCH" 1 303 "0x08"
D G "CCP_COMPARE_CLR_ON_MATCH" 1 304 "0x09"
D G "CCP_COMPARE_INT" 1 305 "0x0A"
D G "CCP_COMPARE_INT_AND_TOGGLE" 1 306 "0x02"
D G "CCP_COMPARE_RESET_TIMER" 1 307 "0x0B"
D G "CCP_PWM" 1 308 "0x0C"
D G "CCP_PWM_PLUS_1" 1 309 "0x1c"
D G "CCP_PWM_PLUS_2" 1 310 "0x2c"
D G "CCP_PWM_PLUS_3" 1 311 "0x3c"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
D G "CCP_PWM_H_H" 1 319 "0x0c"
D G "CCP_PWM_H_L" 1 320 "0x0d"
D G "CCP_PWM_L_H" 1 321 "0x0e"
D G "CCP_PWM_L_L" 1 322 "0x0f"
D G "CCP_PWM_FULL_BRIDGE" 1 324 "0x40"
D G "CCP_PWM_FULL_BRIDGE_REV" 1 325 "0xC0"
D G "CCP_PWM_HALF_BRIDGE" 1 326 "0x80"
D G "CCP_SHUTDOWN_ON_COMP1" 1 328 "0x100000"
D G "CCP_SHUTDOWN_ON_COMP2" 1 329 "0x200000"
D G "CCP_SHUTDOWN_ON_COMP" 1 330 "0x300000"
D G "CCP_SHUTDOWN_ON_INT0" 1 331 "0x400000"
D G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 332 "0x500000"
D G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 333 "0x600000"
D G "CCP_SHUTDOWN_ON_COMP_INT0" 1 334 "0x700000"
D G "CCP_SHUTDOWN_AC_L" 1 336 "0x000000"
D G "CCP_SHUTDOWN_AC_H" 1 337 "0x040000"
D G "CCP_SHUTDOWN_AC_F" 1 338 "0x080000"
D G "CCP_SHUTDOWN_BD_L" 1 340 "0x000000"
D G "CCP_SHUTDOWN_BD_H" 1 341 "0x010000"
D G "CCP_SHUTDOWN_BD_F" 1 342 "0x020000"
D G "CCP_SHUTDOWN_RESTART" 1 344 "0x80000000"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
F N "setup_ccp2" 1 347 ""
V L "mode" 1 347 "int32" `157 
F B "setup_ccp2" 1 347 "void(int32 mode)" `156 
F N "setup_ccp2" 1 348 ""
V L "mode" 1 348 "int32" `159 
V L "pwm" 1 348 "int8" `160 
F B "setup_ccp2" 1 348 "void(int32 mode,int8 pwm)" `158 
F N "set_pwm2_duty" 1 349 ""
V L "value" 1 349 "int8" `162 
F B "set_pwm2_duty" 1 349 "void(int8 value)" `161 
F N "set_pwm2_duty" 1 350 ""
V L "value" 1 350 "int16" `164 
F B "set_pwm2_duty" 1 350 "void(int16 value)" `163 
c L "set_pwm2_duty" 1 3 5 "FUNCTION"
F N "setup_psp" 1 360 ""
V L "mode" 1 360 "int8" `169 
F B "setup_psp" 1 360 "void(int8 mode)" `168 
F N "psp_output_full" 1 361 ""
F B "psp_output_full" 1 361 "int8()" `170 
F N "psp_input_full" 1 362 ""
F B "psp_input_full" 1 362 "int8()" `171 
F N "psp_overflow" 1 363 ""
F B "psp_overflow" 1 363 "int8()" `172  "Constants used in SETUP_PSP() are:"
D G "PSP_ENABLED" 1 365 "0x10"
D G "PSP_DISABLED" 1 366 "0"
c L "psp_overflow" 1 3 3 "FUNCTION"
F N "setup_spi" 1 373 ""
V L "mode" 1 373 "int32" `175 
F B "setup_spi" 1 373 "void(int32 mode)" `174 
F N "spi_write" 1 374 ""
V L "value" 1 374 "int8" `177 
F B "spi_write" 1 374 "void(int8 value)" `176 
F N "spi_write" 1 375 ""
V L "wait" 1 375 "int8" `179 
V L "value" 1 375 "int8" `180 
F B "spi_write" 1 375 "void(int8 wait,int8 value)" `178 
F N "spi_read" 1 376 ""
F B "spi_read" 1 376 "int8()" `181 
F N "spi_read" 1 377 ""
V L "value" 1 377 "int8" `183 
F B "spi_read" 1 377 "int8(int8 value)" `182 
F N "spi_data_is_in" 1 378 ""
F B "spi_data_is_in" 1 378 "int8()" `184 
F N "setup_spi2" 1 379 ""
V L "mode" 1 379 "int32" `186 
F B "setup_spi2" 1 379 "void(int32 mode)" `185 
F N "spi_write2" 1 380 ""
V L "value" 1 380 "int8" `188 
F B "spi_write2" 1 380 "void(int8 value)" `187 
F N "spi_read2" 1 381 ""
F B "spi_read2" 1 381 "int8()" `189 
F N "spi_read2" 1 382 ""
V L "value" 1 382 "int8" `191 
F B "spi_read2" 1 382 "int8(int8 value)" `190 
F N "spi_data_is_in2" 1 383 ""
F B "spi_data_is_in2" 1 383 "int8()" `192  "Constants used in SETUP_SPI() are:"
D G "SPI_DISABLED" 1 385 "0x00"
D G "SPI_MASTER" 1 386 "0x20"
D G "SPI_SLAVE" 1 387 "0x24"
D G "SPI_SCK_IDLE_HIGH" 1 388 "0x10"
D G "SPI_SCK_IDLE_LOW" 1 389 "0x00"
D G "SPI_CLK_DIV_4" 1 390 "0x00"
D G "SPI_CLK_DIV_16" 1 391 "0x01"
D G "SPI_CLK_DIV_64" 1 392 "0x02"
D G "SPI_CLK_T2" 1 393 "0x03"
D G "SPI_SS_DISABLED" 1 394 "0x01"
D G "SPI_XMIT_L_TO_H" 1 396 "0x4000"
D G "SPI_XMIT_H_TO_L" 1 397 "0x0000"
D G "SPI_SAMPLE_AT_MIDDLE" 1 399 "0x0000"
D G "SPI_SAMPLE_AT_END" 1 400 "0x8000"
D G "SPI_L_TO_H" 1 403 "SPI_SCK_IDLE_LOW"
D G "SPI_H_TO_L" 1 404 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 1 3 2 "FUNCTION"
F N "setup_uart" 1 408 ""
V L "baud" 1 408 "int32" `194 
F B "setup_uart" 1 408 "void(int32 baud)" `193 
F N "setup_uart" 1 409 ""
V L "baud" 1 409 "int32" `196 
V L "stream" 1 409 "int8" `197 
F B "setup_uart" 1 409 "void(int32 baud,int8 stream)" `195 
F N "setup_uart" 1 410 ""
V L "baud" 1 410 "int32" `199 
V L "stream" 1 410 "int8" `200 
V L "clock" 1 410 "int32" `201 
F B "setup_uart" 1 410 "void(int32 baud,int8 stream,int32 clock)" `198 
F N "set_uart_speed" 1 411 ""
V L "baud" 1 411 "int32" `203 
F B "set_uart_speed" 1 411 "void(int32 baud)" `202 
F N "set_uart_speed" 1 412 ""
V L "baud" 1 412 "int32" `205 
V L "stream" 1 412 "int8" `206 
F B "set_uart_speed" 1 412 "void(int32 baud,int8 stream)" `204 
F N "set_uart_speed" 1 413 ""
V L "baud" 1 413 "int32" `208 
V L "stream" 1 413 "int8" `209 
V L "clock" 1 413 "int32" `210 
F B "set_uart_speed" 1 413 "void(int32 baud,int8 stream,int32 clock)" `207  "Constants used in setup_uart() are:"
D G "UART_ADDRESS" 1 417 "2"
D G "UART_DATA" 1 418 "4"
D G "UART_AUTODETECT" 1 419 "8"
D G "UART_AUTODETECT_NOWAIT" 1 420 "9"
D G "UART_WAKEUP_ON_RDA" 1 421 "10"
D G "UART_SEND_BREAK" 1 422 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
F N "setup_comparator" 1 427 ""
V L "mode" 1 427 "int32" `212 
F B "setup_comparator" 1 427 "void(int32 mode)" `211  "Constants used in setup_comparator() are:"
D G "A0_A3_A1_A3" 1 429 "0xfff04"
D G "A0_A3_A1_A2_OUT_ON_A4_A5" 1 430 "0xfcf03"
D G "A0_A3_A1_A3_OUT_ON_A4_A5" 1 431 "0xbcf05"
D G "NC_NC_NC_NC" 1 432 "0x0ff07"
D G "A0_A3_A1_A2" 1 433 "0xfff02"
D G "A0_A3_NC_NC_OUT_ON_A4" 1 434 "0x9ef01"
D G "A0_VR_A1_VR" 1 435 "0x3ff06"
D G "A3_VR_A2_VR" 1 436 "0xcff0e"
D G "CP1_INVERT" 1 437 "0x0000010"
D G "CP2_INVERT" 1 438 "0x0000020"
c L "setup_comparator" 1 3 2 "FUNCTION"
F N "setup_vref" 1 445 ""
V L "mode" 1 445 "int8" `216 
F B "setup_vref" 1 445 "void(int8 mode)" `215  "Constants used in setup_vref() are:"
D G "VREF_LOW" 1 447 "0xa0"
D G "VREF_HIGH" 1 448 "0x80"
D G "VREF_F5" 1 450 "0x40"
D G "VREF_COMP" 1 451 "0x10"
c L "setup_vref" 1 3 2 "FUNCTION"
F N "setup_low_volt_detect" 1 455 ""
V L "mode" 1 455 "int8" `218 
F B "setup_low_volt_detect" 1 455 "void(int8 mode)" `217  "Constants used in setup_low_volt_detect() are:"
D G "LVD_LVDIN" 1 457 "0x1F"
D G "LVD_45" 1 458 "0x1E"
D G "LVD_42" 1 459 "0x1D"
D G "LVD_40" 1 460 "0x1C"
D G "LVD_38" 1 461 "0x1B"
D G "LVD_36" 1 462 "0x1A"
D G "LVD_35" 1 463 "0x19"
D G "LVD_33" 1 464 "0x18"
D G "LVD_30" 1 465 "0x17"
D G "LVD_28" 1 466 "0x16"
D G "LVD_27" 1 467 "0x15"
D G "LVD_25" 1 468 "0x14"
D G "LVD_24" 1 469 "0x13"
D G "LVD_23" 1 470 "0x12"
D G "LVD_22" 1 471 "0x11"
D G "LVD_21" 1 472 "0x10"
D G "LVD_TRIGGER_BELOW" 1 474 "0"
D G "LVD_TRIGGER_ABOVE" 1 475 "0x80"
c L "setup_low_volt_detect" 1 3 2 "FUNCTION"
F N "setup_oscillator" 1 480 ""
V L "mode" 1 480 "int8" `220 
F B "setup_oscillator" 1 480 "int8(int8 mode)" `219 
F N "setup_oscillator" 1 481 ""
V L "mode" 1 481 "int8" `222 
V L "tune" 1 481 "sint8" `223 
F B "setup_oscillator" 1 481 "int8(int8 mode,sint8 tune)" `221  "Constants used in setup_oscillator() are:"
D G "OSC_31KHZ" 1 484 "0"
D G "OSC_125KHZ" 1 485 "0x10"
D G "OSC_250KHZ" 1 486 "0x20"
D G "OSC_500KHZ" 1 487 "0x30"
D G "OSC_1MHZ" 1 488 "0x40"
D G "OSC_2MHZ" 1 489 "0x50"
D G "OSC_4MHZ" 1 490 "0x60"
D G "OSC_8MHZ" 1 491 "0x70"
D G "OSC_16MHZ" 1 492 "0x4060"
D G "OSC_32MHZ" 1 493 "0x4070"
D G "OSC_TIMER1" 1 495 "1"
D G "OSC_INTRC" 1 496 "2"
D G "OSC_NORMAL" 1 497 "0"
D G "OSC_IDLE_MODE" 1 499 "0x80"
D G "OSC_31250" 1 500 "0x8000"
D G "OSC_PLL_ON" 1 501 "0x4000"
D G "OSC_PLL_OFF" 1 502 "0"
D G "OSC_STATE_STABLE" 1 506 "4"
D G "OSC_STATE_EXT_RUNNING" 1 507 "8"
c L "setup_oscillator" 1 3 4 "FUNCTION"
F N "setup_adc" 1 514 ""
V L "mode" 1 514 "int16" `225 
F B "setup_adc" 1 514 "void(int16 mode)" `224 
F N "read_adc" 1 515 ""
F B "read_adc" 1 515 "int8()" `226 
F N "read_adc" 1 516 ""
V L "mode" 1 516 "int8" `228 
F B "read_adc" 1 516 "int8(int8 mode)" `227 
F N "read_adc" 1 517 ""
f G "read_adc" 1 517 "int16()" `229 
F N "read_adc" 1 518 ""
V L "mode" 1 518 "int8" `230 
f G "read_adc" 1 518 "int16(int8 mode)" `229 
F N "adc_done" 1 519 ""
F B "adc_done" 1 519 "int8(int8 mode)" `229  "Constants used for SETUP_ADC() are:"
D G "ADC_OFF" 1 521 "0" "ADC Off"
D G "ADC_CLOCK_DIV_2" 1 522 "0x100"
D G "ADC_CLOCK_DIV_4" 1 523 "0x04"
D G "ADC_CLOCK_DIV_8" 1 524 "0x01"
D G "ADC_CLOCK_DIV_16" 1 525 "0x05"
D G "ADC_CLOCK_DIV_32" 1 526 "0x02"
D G "ADC_CLOCK_DIV_64" 1 527 "0x06"
D G "ADC_CLOCK_INTERNAL" 1 528 "0x07" "Internal 2-6us"
D G "ADC_TAD_MUL_0" 1 530 "0x00"
D G "ADC_TAD_MUL_2" 1 531 "0x08"
D G "ADC_TAD_MUL_4" 1 532 "0x10"
D G "ADC_TAD_MUL_6" 1 533 "0x18"
D G "ADC_TAD_MUL_8" 1 534 "0x20"
D G "ADC_TAD_MUL_12" 1 535 "0x28"
D G "ADC_TAD_MUL_16" 1 536 "0x30"
D G "ADC_TAD_MUL_20" 1 537 "0x38"
c L "adc_done" 1 3 1 "FUNCTION"
F N "setup_adc_ports" 1 540 ""
V L "pins" 1 540 "int8" `231 
F B "setup_adc_ports" 1 540 "void(int8 pins)" `230 
F N "setup_adc_ports" 1 541 ""
V L "pins" 1 541 "int8" `233 
V L "reference" 1 541 "int8" `234 
F B "setup_adc_ports" 1 541 "void(int8 pins,int8 reference)" `232 
F N "set_analog_pins" 1 542 ""
V L "pins" 1 542 "int8" `236 
F B "set_analog_pins" 1 542 "void(int8 pins)" `235 
F N "set_analog_pins" 1 543 ""
V L "pins" 1 543 "int8" `238 
V L "reference" 1 543 "int8" `239 
F B "set_analog_pins" 1 543 "void(int8 pins,int8 reference)" `237 
F N "set_adc_channel" 1 544 ""
V L "channel" 1 544 "int8" `241 
F B "set_adc_channel" 1 544 "void(int8 channel)" `240  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
D G "NO_ANALOGS" 1 547 "0x0F" "None"
D G "ALL_ANALOG" 1 548 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
D G "AN0_TO_AN11" 1 549 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
D G "AN0_TO_AN10" 1 550 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
D G "AN0_TO_AN9" 1 551 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
D G "AN0_TO_AN8" 1 552 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
D G "AN0_TO_AN7" 1 553 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
D G "AN0_TO_AN6" 1 554 "0x08" "A0 A1 A2 A3 A5 E0 E1"
D G "AN0_TO_AN5" 1 555 "0x09" "A0 A1 A2 A3 A5 E0"
D G "AN0_TO_AN4" 1 556 "0x0A" "A0 A1 A2 A3 A5"
D G "AN0_TO_AN3" 1 557 "0x0B" "A0 A1 A2 A3"
D G "AN0_TO_AN2" 1 558 "0x0C" "A0 A1 A2"
D G "AN0_TO_AN1" 1 559 "0x0D" "A0 A1"
D G "AN0" 1 560 "0x0E" "A0"
D G "AN0_TO_AN11_ANALOG" 1 561 "0x03" "!old only provided for compatibility"
D G "AN0_TO_AN10_ANALOG" 1 562 "0x04" "!old only provided for compatibility"
D G "AN0_TO_AN9_ANALOG" 1 563 "0x05" "!old only provided for compatibility"
D G "AN0_TO_AN8_ANALOG" 1 564 "0x06" "!old only provided for compatibility"
D G "AN0_TO_AN7_ANALOG" 1 565 "0x07" "!old only provided for compatibility"
D G "AN0_TO_AN6_ANALOG" 1 566 "0x08" "!old only provided for compatibility"
D G "AN0_TO_AN5_ANALOG" 1 567 "0x09" "!old only provided for compatibility"
D G "AN0_TO_AN4_ANALOG" 1 568 "0x0A" "!old only provided for compatibility"
D G "AN0_TO_AN3_ANALOG" 1 569 "0x0B" "!old only provided for compatibility"
D G "AN0_TO_AN2_ANALOG" 1 570 "0x0C" "!old only provided for compatibility"
D G "AN0_TO_AN1_ANALOG" 1 571 "0x0D" "!old only provided for compatibility"
D G "AN0_ANALOG" 1 572 "0x0E" "!old only provided for compatibility"
D G "VSS_VDD" 1 575 "0x00" "Range 0-Vdd"
D G "VREF_VREF" 1 576 "0x30" "Range VrefL-VrefH"
D G "VREF_VDD" 1 577 "0x20" "Range VrefL-Vdd"
D G "VSS_VREF" 1 578 "0x10" "Range 0-VrefH"
D G "ADC_START_AND_READ" 1 581 "7" "This is the default if nothing is specified"
D G "ADC_START_ONLY" 1 582 "1"
D G "ADC_READ_ONLY" 1 583 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
F N "abs" 1 589 ""
V L "x" 1 589 "sint8" `243 
F B "abs" 1 589 "sint8(sint8 x)" `242 
F N "abs" 1 590 ""
V L "x" 1 590 "sint16" `245 
F B "abs" 1 590 "sint16(sint16 x)" `244 
F N "abs" 1 591 ""
V L "x" 1 591 "sint32" `247 
F B "abs" 1 591 "sint32(sint32 x)" `246 
F N "abs" 1 592 ""
V L "x" 1 592 "float" `249 
F B "abs" 1 592 "float(float x)" `248 
F N "_mul" 1 593 ""
V L "??65535" 1 593 "int8" `251 
V L "??65535" 1 593 "int8" `252 
F B "_mul" 1 593 "int16(int8 ,int8 )" `250 
F N "_mul" 1 594 ""
V L "??65535" 1 594 "sint8" `254 
V L "??65535" 1 594 "sint8" `255 
F B "_mul" 1 594 "sint16(sint8 ,sint8 )" `253 
F N "_mul" 1 595 ""
V L "??65535" 1 595 "int16" `257 
V L "??65535" 1 595 "int16" `258 
F B "_mul" 1 595 "int32(int16 ,int16 )" `256 
F N "_mul" 1 596 ""
V L "??65535" 1 596 "sint16" `260 
V L "??65535" 1 596 "sint16" `261 
F B "_mul" 1 596 "sint32(sint16 ,sint16 )" `259  "Memory Manipulation Prototypes:"
F N "read_bank" 1 599 ""
V L "bank" 1 599 "int8" `263 
V L "offset" 1 599 "int8" `264 
F B "read_bank" 1 599 "int8(int8 bank,int8 offset)" `262 
F N "write_bank" 1 600 ""
V L "bank" 1 600 "int8" `266 
V L "offset" 1 600 "int8" `267 
V L "value" 1 600 "int8" `268 
F B "write_bank" 1 600 "void(int8 bank,int8 offset,int8 value)" `265 
F N "strcpy" 1 601 ""
V L "dest" 1 601 "*int8" `270 
V L "src" 1 601 "*int8" `271 
F B "strcpy" 1 601 "void(*int8 dest,*int8 src)" `269 
F N "memset" 1 602 ""
V L "destination" 1 602 "*int8" `273 
V L "value" 1 602 "int8" `274 
V L "num" 1 602 "int16" `275 
F B "memset" 1 602 "void(*int8 destination,int8 value,int16 num)" `272 
F N "memcpy" 1 603 ""
V L "destination" 1 603 "*int8" `277 
V L "source" 1 603 "*int8" `278 
V L "num" 1 603 "int16" `279 
F B "memcpy" 1 603 "void(*int8 destination,*int8 source,int16 num)" `276  "String Prototypes:"
F N "toupper" 1 606 ""
V L "cvalue" 1 606 "int8" `281 
F B "toupper" 1 606 "int8(int8 cvalue)" `280 
F N "tolower" 1 607 ""
V L "cvalue" 1 607 "int8" `283 
F B "tolower" 1 607 "int8(int8 cvalue)" `282 
F N "sprintf" 1 608 ""
V L "string" 1 608 "*int8" `285 
V L "cstring" 1 608 "*int8" `286 
F B "sprintf" 1 608 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `284  "Data Manipulators Prototypes:"
F N "shift_left" 1 611 ""
V L "address" 1 611 "*int8" `289 
V L "bytes" 1 611 "int8" `290 
V L "value" 1 611 "int8" `291 
F B "shift_left" 1 611 "int8(*int8 address,int8 bytes,int8 value)" `288 
F N "shift_right" 1 612 ""
V L "address" 1 612 "*int8" `293 
V L "bytes" 1 612 "int8" `294 
V L "value" 1 612 "int8" `295 
F B "shift_right" 1 612 "int8(*int8 address,int8 bytes,int8 value)" `292 
F N "rotate_left" 1 613 ""
V L "address" 1 613 "*int8" `297 
V L "bytes" 1 613 "int8" `298 
F B "rotate_left" 1 613 "void(*int8 address,int8 bytes)" `296 
F N "rotate_right" 1 614 ""
V L "address" 1 614 "*int8" `300 
V L "bytes" 1 614 "int8" `301 
F B "rotate_right" 1 614 "void(*int8 address,int8 bytes)" `299 
F N "swap" 1 615 ""
V L "value" 1 615 "int8" `303 
F B "swap" 1 615 "void(int8 value)" `302 
F N "make8" 1 616 ""
V L "var" 1 616 "int16" `305 
V L "offset" 1 616 "int8" `306 
F B "make8" 1 616 "int8(int16 var,int8 offset)" `304 
F N "make8" 1 617 ""
V L "var" 1 617 "int32" `308 
V L "offset" 1 617 "int8" `309 
F B "make8" 1 617 "int8(int32 var,int8 offset)" `307 
F N "make16" 1 618 ""
V L "varhigh" 1 618 "int8" `311 
V L "varlow" 1 618 "int8" `312 
F B "make16" 1 618 "int16(int8 varhigh,int8 varlow)" `310 
F N "make32" 1 619 ""
V L "var1" 1 619 "int16" `314 
F B "make32" 1 619 "int32(int16 var1)" `313 
F N "make32" 1 620 ""
V L "var1" 1 620 "int16" `316 
V L "var2" 1 620 "int16" `317 
F B "make32" 1 620 "int32(int16 var1,int16 var2)" `315 
F N "make32" 1 621 ""
V L "var1" 1 621 "int16" `319 
V L "var2" 1 621 "int8" `320 
F B "make32" 1 621 "int32(int16 var1,int8 var2)" `318 
F N "make32" 1 622 ""
V L "var1" 1 622 "int16" `322 
V L "var2" 1 622 "int8" `323 
V L "var3" 1 622 "int8" `324 
F B "make32" 1 622 "int32(int16 var1,int8 var2,int8 var3)" `321 
F N "make32" 1 623 ""
V L "var1" 1 623 "int8" `326 
F B "make32" 1 623 "int32(int8 var1)" `325 
F N "make32" 1 624 ""
V L "var1" 1 624 "int8" `328 
V L "var2" 1 624 "int8" `329 
F B "make32" 1 624 "int32(int8 var1,int8 var2)" `327 
F N "make32" 1 625 ""
V L "var1" 1 625 "int8" `331 
V L "var2" 1 625 "int8" `332 
V L "var3" 1 625 "int8" `333 
F B "make32" 1 625 "int32(int8 var1,int8 var2,int8 var3)" `330 
F N "make32" 1 626 ""
V L "var1" 1 626 "int8" `335 
V L "var2" 1 626 "int8" `336 
V L "var3" 1 626 "int8" `337 
V L "var4" 1 626 "int8" `338 
F B "make32" 1 626 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `334 
F N "make32" 1 627 ""
V L "var1" 1 627 "int8" `340 
V L "var2" 1 627 "int16" `341 
F B "make32" 1 627 "int32(int8 var1,int16 var2)" `339 
F N "make32" 1 628 ""
V L "var1" 1 628 "int8" `343 
V L "var2" 1 628 "int16" `344 
V L "var3" 1 628 "int8" `345 
F B "make32" 1 628 "int32(int8 var1,int16 var2,int8 var3)" `342 
F N "make32" 1 629 ""
V L "var1" 1 629 "int8" `347 
V L "var2" 1 629 "int8" `348 
V L "var3" 1 629 "int16" `349 
F B "make32" 1 629 "int32(int8 var1,int8 var2,int16 var3)" `346 
F N "bit_set" 1 630 ""
V L "var" 1 630 "int8" `351 
V L "bit" 1 630 "int8" `352 
F B "bit_set" 1 630 "void(int8 var,int8 bit)" `350 
F N "bit_set" 1 631 ""
V L "var" 1 631 "int16" `354 
V L "bit" 1 631 "int8" `355 
F B "bit_set" 1 631 "void(int16 var,int8 bit)" `353 
F N "bit_set" 1 632 ""
V L "var" 1 632 "int32" `357 
V L "bit" 1 632 "int8" `358 
F B "bit_set" 1 632 "void(int32 var,int8 bit)" `356 
F N "bit_clear" 1 633 ""
V L "var" 1 633 "int8" `360 
V L "bit" 1 633 "int8" `361 
F B "bit_clear" 1 633 "void(int8 var,int8 bit)" `359 
F N "bit_clear" 1 634 ""
V L "var" 1 634 "int16" `363 
V L "bit" 1 634 "int8" `364 
F B "bit_clear" 1 634 "void(int16 var,int8 bit)" `362 
F N "bit_clear" 1 635 ""
V L "var" 1 635 "int32" `366 
V L "bit" 1 635 "int8" `367 
F B "bit_clear" 1 635 "void(int32 var,int8 bit)" `365 
F N "bit_test" 1 636 ""
V L "var" 1 636 "int8" `369 
V L "bit" 1 636 "int8" `370 
F B "bit_test" 1 636 "int8(int8 var,int8 bit)" `368 
F N "bit_test" 1 637 ""
V L "var" 1 637 "int16" `372 
V L "bit" 1 637 "int8" `373 
F B "bit_test" 1 637 "int8(int16 var,int8 bit)" `371 
F N "bit_test" 1 638 ""
V L "var" 1 638 "int32" `375 
V L "bit" 1 638 "int8" `376 
F B "bit_test" 1 638 "int8(int32 var,int8 bit)" `374  "#use delay() Prototypes:"
F N "delay_cycles" 1 641 ""
V L "count" 1 641 "int8" `378 
F B "delay_cycles" 1 641 "void(int8 count)" `377 
F N "delay_ms" 1 642 ""
V L "time" 1 642 "int16" `380 
F B "delay_ms" 1 642 "void(int16 time)" `379 
F N "delay_us" 1 643 ""
V L "time" 1 643 "int16" `382 
F B "delay_us" 1 643 "void(int16 time)" `381  "#use rs232() Prototypes:"
F N "putchar" 1 646 ""
V L "cdata" 1 646 "int8" `384 
F B "putchar" 1 646 "void(int8 cdata)" `383 
F N "putchar" 1 647 ""
V L "cdata" 1 647 "int8" `386 
V L "stream" 1 647 "int8" `387 
F B "putchar" 1 647 "void(int8 cdata,int8 stream)" `385 
F N "puts" 1 648 ""
V L "string" 1 648 "*int8" `389 
F B "puts" 1 648 "void(*int8 string)" `388 
F N "puts" 1 649 ""
V L "string" 1 649 "*int8" `391 
V L "stream" 1 649 "int8" `392 
F B "puts" 1 649 "void(*int8 string,int8 stream)" `390 
F N "getch" 1 650 ""
F B "getch" 1 650 "int8()" `393 
F N "getch" 1 651 ""
V L "stream" 1 651 "int8" `395 
F B "getch" 1 651 "int8(int8 stream)" `394 
F N "gets" 1 652 ""
V L "string" 1 652 "*int8" `397 
F B "gets" 1 652 "void(*int8 string)" `396 
F N "gets" 1 653 ""
V L "string" 1 653 "*int8" `399 
V L "stream" 1 653 "int8" `400 
F B "gets" 1 653 "void(*int8 string,int8 stream)" `398 
F N "kbhit" 1 654 ""
F B "kbhit" 1 654 "int8()" `401 
F N "kbhit" 1 655 ""
V L "stream" 1 655 "int8" `403 
F B "kbhit" 1 655 "int8(int8 stream)" `402 
F N "printf" 1 656 ""
V L "string" 1 656 "*int8" `405 
F B "printf" 1 656 "void(*int8 string,*int8 _VA_LIST)" `404 
F N "fprintf" 1 657 ""
V L "stream" 1 657 "int8" `408 
V L "string" 1 657 "*int8" `409 
F B "fprintf" 1 657 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `407 
F N "putc_send" 1 658 ""
F B "putc_send" 1 658 "void()" `411 
F N "fputc_send" 1 659 ""
V L "stream" 1 659 "int8" `413 
F B "fputc_send" 1 659 "void(int8 stream)" `412 
F N "rcv_buffer_full" 1 660 ""
F B "rcv_buffer_full" 1 660 "int8()" `414 
F N "rcv_buffer_full" 1 661 ""
V L "stream" 1 661 "int8" `416 
F B "rcv_buffer_full" 1 661 "int8(int8 stream)" `415 
F N "rcv_buffer_bytes" 1 662 ""
F B "rcv_buffer_bytes" 1 662 "int16()" `417 
F N "rcv_buffer_bytes" 1 663 ""
V L "stream" 1 663 "int8" `419 
F B "rcv_buffer_bytes" 1 663 "int16(int8 stream)" `418 
F N "tx_buffer_full" 1 664 ""
F B "tx_buffer_full" 1 664 "int8()" `420 
F N "tx_buffer_full" 1 665 ""
V L "stream" 1 665 "int8" `422 
F B "tx_buffer_full" 1 665 "int8(int8 stream)" `421 
F N "tx_buffer_bytes" 1 666 ""
F B "tx_buffer_bytes" 1 666 "int16()" `423 
F N "tx_buffer_bytes" 1 667 ""
V L "stream" 1 667 "int8" `425 
F B "tx_buffer_bytes" 1 667 "int16(int8 stream)" `424 
F N "linbus_header" 1 668 ""
V L "identifier" 1 668 "int8" `427 
F B "linbus_header" 1 668 "int8(int8 identifier)" `426 
F N "linbus_header" 1 669 ""
V L "stream" 1 669 "int8" `429 
V L "identifier" 1 669 "int8" `430 
F B "linbus_header" 1 669 "int8(int8 stream,int8 identifier)" `428 
F N "linbus_header_hit" 1 670 ""
F B "linbus_header_hit" 1 670 "int8()" `431 
F N "linbus_header_hit" 1 671 ""
V L "stream" 1 671 "int8" `433 
F B "linbus_header_hit" 1 671 "int8(int8 stream)" `432 
F N "linbus_header_get" 1 672 ""
F B "linbus_header_get" 1 672 "int8()" `434 
F N "linbus_header_get" 1 673 ""
V L "stream" 1 673 "int8" `436 
F B "linbus_header_get" 1 673 "int8(int8 stream)" `435 
F N "linbus_rx_response" 1 674 ""
V L "DataPtr" 1 674 "*int8" `438 
V L "count" 1 674 "int8" `439 
F B "linbus_rx_response" 1 674 "int8(*int8 DataPtr,int8 count)" `437 
F N "linbus_rx_response" 1 675 ""
V L "stream" 1 675 "int8" `441 
V L "DataPtr" 1 675 "*int8" `442 
V L "count" 1 675 "int8" `443 
F B "linbus_rx_response" 1 675 "int8(int8 stream,*int8 DataPtr,int8 count)" `440 
F N "linbus_tx_response" 1 676 ""
V L "DataPtr" 1 676 "*int8" `445 
V L "count" 1 676 "int8" `446 
F B "linbus_tx_response" 1 676 "void(*int8 DataPtr,int8 count)" `444 
F N "linbus_tx_response" 1 677 ""
V L "stream" 1 677 "int8" `448 
V L "DataPtr" 1 677 "*int8" `449 
V L "count" 1 677 "int8" `450 
F B "linbus_tx_response" 1 677 "void(int8 stream,*int8 DataPtr,int8 count)" `447 
F N "linbus_checksum_type" 1 678 ""
V L "type" 1 678 "int8" `452 
F B "linbus_checksum_type" 1 678 "void(int8 type)" `451 
F N "linbus_checksum_type" 1 679 ""
V L "stream" 1 679 "int8" `454 
V L "type" 1 679 "int8" `455 
F B "linbus_checksum_type" 1 679 "void(int8 stream,int8 type)" `453  "#use i2c() Prototypes:"
F N "i2c_read" 1 682 ""
F B "i2c_read" 1 682 "int8()" `456 
F N "i2c_read" 1 683 ""
V L "ack" 1 683 "int8" `458 
F B "i2c_read" 1 683 "int8(int8 ack)" `457 
F N "i2c_read" 1 684 ""
V L "stream" 1 684 "int8" `460 
V L "ack" 1 684 "int8" `461 
F B "i2c_read" 1 684 "int8(int8 stream,int8 ack)" `459 
F N "i2c_write" 1 685 ""
V L "data" 1 685 "int8" `463 
F B "i2c_write" 1 685 "int8(int8 data)" `462 
F N "i2c_write" 1 686 ""
V L "stream" 1 686 "int8" `465 
V L "data" 1 686 "int8" `466 
F B "i2c_write" 1 686 "int8(int8 stream,int8 data)" `464 
F N "i2c_start" 1 687 ""
F B "i2c_start" 1 687 "void()" `467 
F N "i2c_start" 1 688 ""
V L "stream" 1 688 "int8" `469 
F B "i2c_start" 1 688 "void(int8 stream)" `468 
F N "i2c_start" 1 689 ""
V L "stream" 1 689 "int8" `471 
V L "restart" 1 689 "int8" `472 
F B "i2c_start" 1 689 "void(int8 stream,int8 restart)" `470 
F N "i2c_stop" 1 690 ""
F B "i2c_stop" 1 690 "void()" `473 
F N "i2c_stop" 1 691 ""
V L "stream" 1 691 "int8" `475 
F B "i2c_stop" 1 691 "void(int8 stream)" `474 
F N "i2c_isr_state" 1 692 ""
F B "i2c_isr_state" 1 692 "int8()" `476 
F N "i2c_slaveaddr" 1 693 ""
V L "addr" 1 693 "int8" `478 
F B "i2c_slaveaddr" 1 693 "void(int8 addr)" `477 
F N "i2c_slaveaddr" 1 694 ""
V L "stream" 1 694 "int8" `480 
V L "addr" 1 694 "int8" `481 
F B "i2c_slaveaddr" 1 694 "void(int8 stream,int8 addr)" `479 
F N "i2c_poll" 1 695 ""
F B "i2c_poll" 1 695 "int8()" `482 
F N "i2c_poll" 1 696 ""
V L "stream" 1 696 "int8" `484 
F B "i2c_poll" 1 696 "int8(int8 stream)" `483 
F N "i2c_init" 1 697 ""
V L "baud" 1 697 "int32" `486 
F B "i2c_init" 1 697 "void(int32 baud)" `485 
F N "i2c_init" 1 698 ""
V L "stream" 1 698 "int8" `488 
V L "baud" 1 698 "int32" `489 
F B "i2c_init" 1 698 "void(int8 stream,int32 baud)" `487 
F N "i2c_transfer" 1 699 ""
V L "address" 1 699 "int8" `491 
V L "wData" 1 699 "*int8" `492 
V L "wCount" 1 699 "int8" `493 
F B "i2c_transfer" 1 699 "int8(int8 address,*int8 wData,int8 wCount)" `490 
F N "i2c_transfer" 1 700 ""
V L "address" 1 700 "int8" `495 
V L "wData" 1 700 "*int8" `496 
V L "wCount" 1 700 "int8" `497 
V L "rData" 1 700 "*int8" `498 
V L "rCount" 1 700 "*int8" `499 
F B "i2c_transfer" 1 700 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `494 
F N "i2c_transfer" 1 701 ""
V L "stream" 1 701 "int8" `501 
V L "address" 1 701 "int8" `502 
V L "wData" 1 701 "*int8" `503 
V L "wCount" 1 701 "int8" `504 
F B "i2c_transfer" 1 701 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `500 
F N "i2c_transfer" 1 702 ""
V L "stream" 1 702 "int8" `506 
V L "address" 1 702 "int8" `507 
V L "wData" 1 702 "*int8" `508 
V L "wCount" 1 702 "int8" `509 
V L "rData" 1 702 "*int8" `510 
V L "rCount" 1 702 "*int8" `511 
F B "i2c_transfer" 1 702 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `505 
F N "i2c_transfer_out" 1 703 ""
V L "address" 1 703 "int8" `513 
V L "wData" 1 703 "*int8" `514 
V L "wCount" 1 703 "int8" `515 
F B "i2c_transfer_out" 1 703 "int8(int8 address,*int8 wData,int8 wCount)" `512 
F N "i2c_transfer_out" 1 704 ""
V L "stream" 1 704 "int8" `517 
V L "address" 1 704 "int8" `518 
V L "wData" 1 704 "*int8" `519 
V L "wCount" 1 704 "int8" `520 
F B "i2c_transfer_out" 1 704 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `516 
F N "i2c_transfer_in" 1 705 ""
V L "address" 1 705 "int8" `522 
V L "rData" 1 705 "*int8" `523 
V L "rCount" 1 705 "int8" `524 
F B "i2c_transfer_in" 1 705 "int8(int8 address,*int8 rData,int8 rCount)" `521 
F N "i2c_transfer_in" 1 706 ""
V L "stream" 1 706 "int8" `526 
V L "address" 1 706 "int8" `527 
V L "rData" 1 706 "*int8" `528 
V L "rCount" 1 706 "int8" `529 
F B "i2c_transfer_in" 1 706 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `525  "#use spi() Prototypes:"
F N "spi_xfer" 1 709 ""
F B "spi_xfer" 1 709 "int8()" `530 
F N "spi_xfer" 1 710 ""
f G "spi_xfer" 1 710 "int16()" `531 
F N "spi_xfer" 1 711 ""
f G "spi_xfer" 1 711 "int32()" `531 
F N "spi_xfer" 1 712 ""
V L "data" 1 712 "int8" `532 
F B "spi_xfer" 1 712 "int8(int8 data)" `531 
F N "spi_xfer" 1 713 ""
V L "data" 1 713 "int16" `534 
F B "spi_xfer" 1 713 "int16(int16 data)" `533 
F N "spi_xfer" 1 714 ""
V L "data" 1 714 "int32" `536 
F B "spi_xfer" 1 714 "int32(int32 data)" `535 
F N "spi_xfer" 1 715 ""
V L "stream" 1 715 "int8" `538 
V L "data" 1 715 "int8" `539 
F B "spi_xfer" 1 715 "int8(int8 stream,int8 data)" `537 
F N "spi_xfer" 1 716 ""
V L "stream" 1 716 "int8" `541 
V L "data" 1 716 "int16" `542 
F B "spi_xfer" 1 716 "int16(int8 stream,int16 data)" `540 
F N "spi_xfer" 1 717 ""
V L "stream" 1 717 "int8" `544 
V L "data" 1 717 "int32" `545 
F B "spi_xfer" 1 717 "int32(int8 stream,int32 data)" `543 
F N "spi_xfer" 1 718 ""
V L "stream" 1 718 "int8" `547 
V L "data" 1 718 "int8" `548 
V L "bits" 1 718 "int8" `549 
F B "spi_xfer" 1 718 "int8(int8 stream,int8 data,int8 bits)" `546 
F N "spi_xfer" 1 719 ""
V L "stream" 1 719 "int8" `551 
V L "data" 1 719 "int16" `552 
V L "bits" 1 719 "int8" `553 
F B "spi_xfer" 1 719 "int16(int8 stream,int16 data,int8 bits)" `550 
F N "spi_xfer" 1 720 ""
V L "stream" 1 720 "int8" `555 
V L "data" 1 720 "int32" `556 
V L "bits" 1 720 "int8" `557 
F B "spi_xfer" 1 720 "int32(int8 stream,int32 data,int8 bits)" `554 
F N "spi_init" 1 721 ""
V L "baud" 1 721 "int32" `559 
F B "spi_init" 1 721 "void(int32 baud)" `558 
F N "spi_init" 1 722 ""
V L "stream" 1 722 "int8" `561 
V L "baud" 1 722 "int32" `562 
F B "spi_init" 1 722 "void(int8 stream,int32 baud)" `560 
F N "spi_speed" 1 723 ""
V L "baud" 1 723 "int32" `564 
F B "spi_speed" 1 723 "void(int32 baud)" `563 
F N "spi_speed" 1 724 ""
V L "stream" 1 724 "int8" `566 
V L "baud" 1 724 "int32" `567 
F B "spi_speed" 1 724 "void(int8 stream,int32 baud)" `565 
F N "spi_speed" 1 725 ""
V L "stream" 1 725 "int8" `569 
V L "baud" 1 725 "int32" `570 
V L "clock" 1 725 "int32" `571 
F B "spi_speed" 1 725 "void(int8 stream,int32 baud,int32 clock)" `568 
F N "spi_prewrite" 1 726 ""
V L "data" 1 726 "int8" `573 
F B "spi_prewrite" 1 726 "void(int8 data)" `572 
F N "spi_prewrite" 1 727 ""
V L "data" 1 727 "int16" `575 
F B "spi_prewrite" 1 727 "void(int16 data)" `574 
F N "spi_prewrite" 1 728 ""
V L "data" 1 728 "int32" `577 
F B "spi_prewrite" 1 728 "void(int32 data)" `576 
F N "spi_prewrite" 1 729 ""
V L "??65535" 1 729 "int8" `579 
V L "data" 1 729 "int8" `580 
F B "spi_prewrite" 1 729 "void(int8 ,int8 data)" `578 
F N "spi_prewrite" 1 730 ""
V L "??65535" 1 730 "int8" `582 
V L "data" 1 730 "int16" `583 
F B "spi_prewrite" 1 730 "void(int8 ,int16 data)" `581 
F N "spi_prewrite" 1 731 ""
V L "??65535" 1 731 "int8" `585 
V L "data" 1 731 "int32" `586 
F B "spi_prewrite" 1 731 "void(int8 ,int32 data)" `584 
F N "spi_xfer_in" 1 732 ""
F B "spi_xfer_in" 1 732 "int8()" `587 
F N "spi_xfer_in" 1 733 ""
f G "spi_xfer_in" 1 733 "int16()" `588 
F N "spi_xfer_in" 1 734 ""
f G "spi_xfer_in" 1 734 "int32()" `588 
F N "spi_xfer_in" 1 735 ""
V L "bits" 1 735 "int8" `589 
F B "spi_xfer_in" 1 735 "int8(int8 bits)" `588 
F N "spi_xfer_in" 1 736 ""
V L "bits" 1 736 "int8" `591 
f G "spi_xfer_in" 1 736 "int16(int8 bits)" `590 
F N "spi_xfer_in" 1 737 ""
V L "bits" 1 737 "int8" `591 
f G "spi_xfer_in" 1 737 "int32(int8 bits)" `590 
F N "spi_xfer_in" 1 738 ""
V L "stream" 1 738 "int8" `591 
V L "bits" 1 738 "int8" `592 
F B "spi_xfer_in" 1 738 "int8(int8 stream,int8 bits)" `590 
F N "spi_xfer_in" 1 739 ""
V L "stream" 1 739 "int8" `591 
V L "bits" 1 739 "int8" `595 
f G "spi_xfer_in" 1 739 "int16(int8 stream,int8 bits)" `593 
F N "spi_xfer_in" 1 740 ""
V L "stream" 1 740 "int8" `591 
V L "bits" 1 740 "int8" `595 
f G "spi_xfer_in" 1 740 "int32(int8 stream,int8 bits)" `593 
F N "spi_transfer" 1 741 ""
V L "wData" 1 741 "*int8" `594 
V L "rData" 1 741 "*int8" `595 
V L "count" 1 741 "int16" `596 
F B "spi_transfer" 1 741 "void(*int8 wData,*int8 rData,int16 count)" `593 
F N "spi_transfer" 1 742 ""
V L "stream" 1 742 "int8" `598 
V L "wData" 1 742 "*int8" `599 
V L "rData" 1 742 "*int8" `600 
V L "count" 1 742 "int16" `601 
F B "spi_transfer" 1 742 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `597 
F N "spi_transfer_write" 1 743 ""
V L "wData" 1 743 "*int8" `603 
V L "count" 1 743 "int16" `604 
F B "spi_transfer_write" 1 743 "void(*int8 wData,int16 count)" `602 
F N "spi_transfer_write" 1 744 ""
V L "stream" 1 744 "int8" `606 
V L "wData" 1 744 "*int8" `607 
V L "count" 1 744 "int16" `608 
F B "spi_transfer_write" 1 744 "void(int8 stream,*int8 wData,int16 count)" `605 
F N "spi_transfer_read" 1 745 ""
V L "rData" 1 745 "*int8" `610 
V L "count" 1 745 "int16" `611 
F B "spi_transfer_read" 1 745 "void(*int8 rData,int16 count)" `609 
F N "spi_transfer_read" 1 746 ""
V L "stream" 1 746 "int8" `613 
V L "rData" 1 746 "*int8" `614 
V L "count" 1 746 "int16" `615 
F B "spi_transfer_read" 1 746 "void(int8 stream,*int8 rData,int16 count)" `612  "#use rtos() Prototypes:"
F N "rtos_run" 1 749 ""
F B "rtos_run" 1 749 "void()" `616 
F N "rtos_yield" 1 750 ""
F B "rtos_yield" 1 750 "void()" `617 
F N "rtos_enable" 1 751 ""
V L "task" 1 751 "int8" `619 
F B "rtos_enable" 1 751 "void(int8 task)" `618 
F N "rtos_disable" 1 752 ""
V L "task" 1 752 "int8" `621 
F B "rtos_disable" 1 752 "void(int8 task)" `620 
F N "rtos_terminate" 1 753 ""
F B "rtos_terminate" 1 753 "void()" `622 
F N "rtos_await" 1 754 ""
V L "flag" 1 754 "int8" `624 
F B "rtos_await" 1 754 "void(int8 flag)" `623 
F N "rtos_wait" 1 755 ""
V L "sem" 1 755 "int8" `626 
F B "rtos_wait" 1 755 "void(int8 sem)" `625 
F N "rtos_signal" 1 756 ""
V L "sem" 1 756 "int8" `628 
F B "rtos_signal" 1 756 "void(int8 sem)" `627 
F N "rtos_msg_send" 1 757 ""
V L "task" 1 757 "int8" `630 
V L "msg" 1 757 "int8" `631 
F B "rtos_msg_send" 1 757 "void(int8 task,int8 msg)" `629 
F N "rtos_msg_read" 1 758 ""
F B "rtos_msg_read" 1 758 "int8()" `632 
F N "rtos_msg_poll" 1 759 ""
F B "rtos_msg_poll" 1 759 "int8()" `633 
F N "rtos_overrun" 1 760 ""
V L "task" 1 760 "int8" `635 
F B "rtos_overrun" 1 760 "int8(int8 task)" `634 
F N "rtos_stats" 1 761 ""
V L "task" 1 761 "int8" `637 
V L "stat" 1 761 "*int8" `638 
F B "rtos_stats" 1 761 "void(int8 task,*int8 stat)" `636  "#use timer() Prototypes:"
F N "get_ticks" 1 764 ""
F B "get_ticks" 1 764 "int8()" `639 
F N "get_ticks" 1 765 ""
f G "get_ticks" 1 765 "int16()" `640 
F N "get_ticks" 1 766 ""
f G "get_ticks" 1 766 "int32()" `640 
F N "get_ticks" 1 767 ""
V L "stream" 1 767 "int8" `641 
F B "get_ticks" 1 767 "int8(int8 stream)" `640 
F N "get_ticks" 1 768 ""
V L "stream" 1 768 "int8" `643 
f G "get_ticks" 1 768 "int16(int8 stream)" `642 
F N "get_ticks" 1 769 ""
V L "stream" 1 769 "int8" `643 
f G "get_ticks" 1 769 "int32(int8 stream)" `642 
F N "set_ticks" 1 770 ""
V L "value" 1 770 "int8" `643 
F B "set_ticks" 1 770 "void(int8 value)" `642 
F N "set_ticks" 1 771 ""
V L "value" 1 771 "int16" `645 
F B "set_ticks" 1 771 "void(int16 value)" `644 
F N "set_ticks" 1 772 ""
V L "value" 1 772 "int32" `647 
F B "set_ticks" 1 772 "void(int32 value)" `646 
F N "set_ticks" 1 773 ""
V L "stream" 1 773 "int8" `649 
V L "value" 1 773 "int8" `650 
F B "set_ticks" 1 773 "void(int8 stream,int8 value)" `648 
F N "set_ticks" 1 774 ""
V L "stream" 1 774 "int8" `652 
V L "value" 1 774 "int16" `653 
F B "set_ticks" 1 774 "void(int8 stream,int16 value)" `651 
F N "set_ticks" 1 775 ""
V L "stream" 1 775 "int8" `655 
V L "value" 1 775 "int32" `656 
F B "set_ticks" 1 775 "void(int8 stream,int32 value)" `654  "#use pwm() Prototypes:"
F N "pwm_on" 1 778 ""
F B "pwm_on" 1 778 "void()" `657 
F N "pwm_on" 1 779 ""
V L "stream" 1 779 "int8" `659 
F B "pwm_on" 1 779 "void(int8 stream)" `658 
F N "pwm_off" 1 780 ""
F B "pwm_off" 1 780 "void()" `660 
F N "pwm_off" 1 781 ""
V L "stream" 1 781 "int8" `662 
F B "pwm_off" 1 781 "void(int8 stream)" `661 
F N "pwm_set_duty" 1 782 ""
V L "duty" 1 782 "int16" `664 
F B "pwm_set_duty" 1 782 "void(int16 duty)" `663 
F N "pwm_set_duty" 1 783 ""
V L "stream" 1 783 "int8" `666 
V L "duty" 1 783 "int16" `667 
F B "pwm_set_duty" 1 783 "void(int8 stream,int16 duty)" `665 
F N "pwm_set_duty_percent" 1 784 ""
V L "percent" 1 784 "int16" `669 
F B "pwm_set_duty_percent" 1 784 "void(int16 percent)" `668 
F N "pwm_set_duty_percent" 1 785 ""
V L "stream" 1 785 "int8" `671 
V L "percent" 1 785 "int16" `672 
F B "pwm_set_duty_percent" 1 785 "void(int8 stream,int16 percent)" `670 
F N "pwm_set_frequency" 1 786 ""
V L "frequency" 1 786 "int32" `674 
F B "pwm_set_frequency" 1 786 "void(int32 frequency)" `673 
F N "pwm_set_frequency" 1 787 ""
V L "stream" 1 787 "int8" `676 
V L "frequency" 1 787 "int32" `677 
F B "pwm_set_frequency" 1 787 "void(int8 stream,int32 frequency)" `675 
F N "pwm_get_duty_period" 1 788 ""
F B "pwm_get_duty_period" 1 788 "int16()" `678 
F N "pwm_get_duty_period" 1 789 ""
V L "stream" 1 789 "int8" `680 
F B "pwm_get_duty_period" 1 789 "int16(int8 stream)" `679  "#use capture() Prototypes:"
F N "get_capture_time" 1 792 ""
F B "get_capture_time" 1 792 "int16()" `681 
F N "get_capture_time" 1 793 ""
V L "stream" 1 793 "int8" `683 
F B "get_capture_time" 1 793 "int16(int8 stream)" `682 
F N "get_capture_event" 1 794 ""
F B "get_capture_event" 1 794 "int8()" `684 
F N "get_capture_event" 1 795 ""
V L "stream" 1 795 "int8" `686 
F B "get_capture_event" 1 795 "int8(int8 stream)" `685  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
F N "goto_address" 1 808 ""
V L "address" 1 808 "int16" `688 
F B "goto_address" 1 808 "void(int16 address)" `687 
F N "label_address" 1 809 ""
V L "label" 1 809 "int16" `690 
F B "label_address" 1 809 "int16(int16 label)" `689  "Program Memory Read Prototypes:"
F N "read_program_memory" 1 812 ""
V L "address" 1 812 "int16" `692 
V L "DataPtr" 1 812 "*int8" `693 
V L "count" 1 812 "int16" `694 
F B "read_program_memory" 1 812 "void(int16 address,*int8 DataPtr,int16 count)" `691 
F N "read_program_eeprom" 1 813 ""
V L "address" 1 813 "int16" `696 
F B "read_program_eeprom" 1 813 "int16(int16 address)" `695  "Program Memory Write Prototypes:"
F N "erase_program_eeprom" 1 816 ""
V L "address" 1 816 "int16" `698 
F B "erase_program_eeprom" 1 816 "void(int16 address)" `697 
F N "write_program_memory" 1 817 ""
V L "address" 1 817 "int16" `700 
V L "DataPtr" 1 817 "*int8" `701 
V L "count" 1 817 "int16" `702 
F B "write_program_memory" 1 817 "void(int16 address,*int8 DataPtr,int16 count)" `699 
F N "write_program_eeprom" 1 818 ""
V L "address" 1 818 "int16" `704 
V L "data" 1 818 "int16" `705 
F B "write_program_eeprom" 1 818 "void(int16 address,int16 data)" `703  "EEPROM Prototypes:"
D G "__EEADDRESS__" 1 825 "unsigned int8"
F N "read_eeprom" 1 828 ""
V L "address" 1 828 "int8" `707 
F B "read_eeprom" 1 828 "int8(int8 address)" `706 
F N "write_eeprom" 1 829 ""
V L "address" 1 829 "int8" `709 
V L "value" 1 829 "int8" `710 
F B "write_eeprom" 1 829 "void(int8 address,int8 value)" `708  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
F N "enable_interrupts" 1 836 ""
V L "interrupt" 1 836 "int32" `712 
F B "enable_interrupts" 1 836 "void(int32 interrupt)" `711 
F N "disable_interrupts" 1 837 ""
V L "interrupt" 1 837 "int32" `714 
F B "disable_interrupts" 1 837 "void(int32 interrupt)" `713 
F N "clear_interrupt" 1 838 ""
V L "interrupt" 1 838 "int32" `716 
F B "clear_interrupt" 1 838 "void(int32 interrupt)" `715 
F N "interrupt_active" 1 839 ""
V L "interrupt" 1 839 "int32" `718 
F B "interrupt_active" 1 839 "int8(int32 interrupt)" `717 
F N "interrupt_enabled" 1 840 ""
V L "interrupt" 1 840 "int32" `720 
F B "interrupt_enabled" 1 840 "int8(int32 interrupt)" `719 
F N "ext_int_edge" 1 841 ""
V L "source" 1 841 "int8" `722 
V L "edge" 1 841 "int8" `723 
F B "ext_int_edge" 1 841 "void(int8 source,int8 edge)" `721 
F N "jump_to_isr" 1 842 ""
V L "address" 1 842 "int16" `725 
F B "jump_to_isr" 1 842 "void(int16 address)" `724  "Constants used in EXT_INT_EDGE() are:"
D G "L_TO_H" 1 844 "0x40"
D G "H_TO_L" 1 845 "0"
D G "GLOBAL" 1 847 "0xF2C0"
D G "PERIPH" 1 848 "0xF240"
D G "INT_RTCC" 1 849 "0x00F220"
D G "INT_TIMER0" 1 850 "0x00F220"
D G "INT_TIMER1" 1 851 "0x009D01"
D G "INT_TIMER2" 1 852 "0x009D02"
D G "INT_TIMER3" 1 853 "0x00A002"
D G "INT_EXT_L2H" 1 854 "0x5000F210"
D G "INT_EXT_H2L" 1 855 "0x6000F210"
D G "INT_EXT" 1 856 "0x00F210"
D G "INT_EXT1_L2H" 1 857 "0x5001F008"
D G "INT_EXT1_H2L" 1 858 "0x6001F008"
D G "INT_EXT1" 1 859 "0x00F008"
D G "INT_EXT2_L2H" 1 860 "0x5002F010"
D G "INT_EXT2_H2L" 1 861 "0x6002F010"
D G "INT_EXT2" 1 862 "0x00F010"
D G "INT_RB" 1 863 "0x00FFF208"
D G "INT_PSP" 1 864 "0x009D80"
D G "INT_AD" 1 865 "0x009D40"
D G "INT_RDA" 1 866 "0x009D20"
D G "INT_TBE" 1 867 "0x009D10"
D G "INT_SSP" 1 868 "0x009D08"
D G "INT_CCP1" 1 869 "0x009D04"
D G "INT_CCP2" 1 870 "0x00A001"
D G "INT_BUSCOL" 1 871 "0x00A008"
D G "INT_LOWVOLT" 1 872 "0x00A004"
D G "INT_COMP" 1 873 "0x00A040"
D G "INT_EEPROM" 1 874 "0x00A010"
D G "INT_OSCF" 1 875 "0x00A080"
D G "INT_HLVD" 1 876 "0x00A004"
F N "main" 0 4 ""
F G "main" 0 5 "void()" `730 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
