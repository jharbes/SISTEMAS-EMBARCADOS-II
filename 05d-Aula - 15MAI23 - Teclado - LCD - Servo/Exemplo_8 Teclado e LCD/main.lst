CCS PCH C Compiler, Version 5.099, 54900               15-mai-23 09:33

               Filename:   G:\Meu Drive\CEFET 2023\Sistemas de Informação 2023_1\Sistemas Embarcados 2\05d-Aula - 15MAI23 - Teclado - LCD - Servo\Exemplo_8 Teclado e LCD\main.lst

               ROM used:   866 bytes (3%)
                           Largest free fragment is 31902
               RAM used:   12 (1%) at main() level
                           23 (1%) worst case
               Stack used: 5 locations
               Stack size: 31

*
0000:  GOTO   02D8
.................... #include <main.h>
.................... #include <18F4520.h>
.................... //////////// Standard Header file for the PIC18F4520 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4520
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 31,32
0016:  DATA 33,34
0018:  DATA 35,36
001A:  DATA 37,38
001C:  DATA 39,2A
001E:  DATA 30,23
0020:  DATA 0C,44
0022:  DATA 69,67
0024:  DATA 69,74
0026:  DATA 65,20
0028:  DATA 75,6D
002A:  DATA 61,20
002C:  DATA 74,65
002E:  DATA 63,6C
0030:  DATA 61,0A
0032:  DATA 00,00
0034:  DATA 0C,4C
0036:  DATA 69,6D
0038:  DATA 70,61
003A:  DATA 6E,64
003C:  DATA 6F,20
003E:  DATA 64,69
0040:  DATA 73,70
0042:  DATA 6C,61
0044:  DATA 79,0A
0046:  DATA 00,00
0048:  DATA 0C,00
004A:  DATA 0C,54
004C:  DATA 65,63
004E:  DATA 6C,61
0050:  DATA 64,6F
0052:  DATA 20,43
0054:  DATA 45,46
0056:  DATA 45,54
0058:  DATA 0A,00
*
0208:  TBLRD*+
020A:  MOVF   FF5,F
020C:  BZ    0226
020E:  MOVFF  FF6,0B
0212:  MOVFF  FF7,0C
0216:  MOVFF  FF5,0D
021A:  RCALL  01B8
021C:  MOVFF  0B,FF6
0220:  MOVFF  0C,FF7
0224:  BRA    0208
0226:  RETURN 0
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(internal=8MHz)
*
005E:  CLRF   FEA
0060:  MOVLW  10
0062:  MOVWF  FE9
0064:  MOVF   FEF,W
0066:  BZ    0082
0068:  MOVLW  02
006A:  MOVWF  01
006C:  CLRF   00
006E:  DECFSZ 00,F
0070:  BRA    006E
0072:  DECFSZ 01,F
0074:  BRA    006C
0076:  MOVLW  97
0078:  MOVWF  00
007A:  DECFSZ 00,F
007C:  BRA    007A
007E:  DECFSZ FEF,F
0080:  BRA    0068
0082:  RETURN 0
.................... 
.................... 
.................... 
.................... //#define use_portd_kbd TRUE // default
.................... #include <KBD.C>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                             KBD.C                                 ////
.................... ////                  Generic keypad scan driver                       ////
.................... ////                                                                   ////
.................... ////  kbd_init()   Must be called before any other function.           ////
.................... ////                                                                   ////
.................... ////  c = kbd_getc()  Will return a key value if pressed or /0 if not  ////
.................... ////                   This function should be called frequently so as ////
.................... ////                   not to miss a key press.                        ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////// The following defines the keypad layout on port D
.................... 
.................... // Un-comment the following define to use port B
.................... // #define use_portb_kbd TRUE
.................... 
.................... // Make sure the port used has pull-up resistors (or the LCD) on
.................... // the column pins
.................... 
.................... #if defined use_portb_kbd
....................    #byte kbd = getenv("SFR:PORTB")
.................... #else
....................    #byte kbd = getenv("SFR:PORTD")
.................... #endif
.................... 
.................... #if defined use_portb_kbd
....................    #define set_tris_kbd(x) set_tris_b(x)
.................... #else
....................    #define set_tris_kbd(x) set_tris_d(x)
.................... #endif
.................... 
.................... //Keypad connection:   (for example column 0 is B2)
.................... //                Bx:
.................... 
.................... #ifdef blue_keypad  ///////////////////////////////////// For the blue keypad
.................... #define COL0 (1 << 2)
.................... #define COL1 (1 << 3)
.................... #define COL2 (1 << 6)
.................... 
.................... #define ROW0 (1 << 4)
.................... #define ROW1 (1 << 7)
.................... #define ROW2 (1 << 1)
.................... #define ROW3 (1 << 5)
.................... 
.................... #else ////////////////////////////////////////////////// For the black keypad
.................... #define COL0 (1 << 5)
.................... #define COL1 (1 << 6)
.................... #define COL2 (1 << 7)
.................... 
.................... #define ROW0 (1 << 1)
.................... #define ROW1 (1 << 2)
.................... #define ROW2 (1 << 3)
.................... #define ROW3 (1 << 4)
.................... 
.................... #endif
.................... 
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3)
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2)
.................... 
.................... // Keypad layout:
.................... char const KEYS[4][3] = {{'1','2','3'},
....................                          {'4','5','6'},
....................                          {'7','8','9'},
....................                          {'*','0','#'}};
.................... 
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where
....................                                   // n is the number of times you expect
....................                                   // to call kbd_getc each second
.................... 
.................... 
.................... void kbd_init() {
*
005A:  GOTO   0306 (RETURN)
.................... }
.................... 
.................... char kbd_getc( ) {
....................    static BYTE kbd_call_count;
....................    static int1 kbd_down;
....................    static char last_key;
....................    static BYTE col;
.................... 
....................    BYTE kchar;
....................    BYTE row;
.................... 
....................    kchar='\0';
*
0228:  CLRF   0B
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) {
022A:  INCF   04,F
022C:  MOVF   04,W
022E:  SUBLW  21
0230:  BC    02CC
....................        switch (col) {
0232:  MOVF   07,W
0234:  BZ    0240
0236:  XORLW  01
0238:  BZ    0248
023A:  XORLW  03
023C:  BZ    0250
023E:  BRA    0256
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0);
0240:  MOVLW  DE
0242:  MOVWF  F95
....................                     kbd=~COL0&ALL_PINS;
0244:  MOVWF  F83
....................                     break;
0246:  BRA    0256
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1);
0248:  MOVLW  BE
024A:  MOVWF  F95
....................                     kbd=~COL1&ALL_PINS;
024C:  MOVWF  F83
....................                     break;
024E:  BRA    0256
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2);
0250:  MOVLW  7E
0252:  MOVWF  F95
....................                     kbd=~COL2&ALL_PINS;
0254:  MOVWF  F83
....................                     break;
....................        }
.................... 
....................        if(kbd_down) {
0256:  BTFSS  05.0
0258:  BRA    026C
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) {
025A:  MOVF   F83,W
025C:  ANDLW  1E
025E:  SUBLW  1E
0260:  BNZ   026A
....................            kbd_down=FALSE;
0262:  BCF    05.0
....................            kchar=last_key;
0264:  MOVFF  06,0B
....................            last_key='\0';
0268:  CLRF   06
....................          }
....................        } else {
026A:  BRA    02CA
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) {
026C:  MOVF   F83,W
026E:  ANDLW  1E
0270:  SUBLW  1E
0272:  BZ    02C0
....................              if((kbd & ROW0)==0)
0274:  MOVF   F83,W
0276:  ANDLW  02
0278:  BNZ   027E
....................                row=0;
027A:  CLRF   0C
027C:  BRA    02A0
....................              else if((kbd & ROW1)==0)
027E:  MOVF   F83,W
0280:  ANDLW  04
0282:  BNZ   028A
....................                row=1;
0284:  MOVLW  01
0286:  MOVWF  0C
0288:  BRA    02A0
....................              else if((kbd & ROW2)==0)
028A:  MOVF   F83,W
028C:  ANDLW  08
028E:  BNZ   0296
....................                row=2;
0290:  MOVLW  02
0292:  MOVWF  0C
0294:  BRA    02A0
....................              else if((kbd & ROW3)==0)
0296:  MOVF   F83,W
0298:  ANDLW  10
029A:  BNZ   02A0
....................                row=3;
029C:  MOVLW  03
029E:  MOVWF  0C
....................              last_key =KEYS[row][col];
02A0:  MOVF   0C,W
02A2:  MULLW  03
02A4:  MOVF   FF3,W
02A6:  CLRF   0E
02A8:  MOVWF  0D
02AA:  CLRF   03
02AC:  MOVF   07,W
02AE:  ADDWF  0D,W
02B0:  MOVWF  01
02B2:  MOVF   0E,W
02B4:  ADDWFC 03,F
02B6:  MOVF   01,W
02B8:  RCALL  0004
02BA:  MOVWF  06
....................              kbd_down = TRUE;
02BC:  BSF    05.0
....................           } else {
02BE:  BRA    02CA
....................              ++col;
02C0:  INCF   07,F
....................              if(col==3)
02C2:  MOVF   07,W
02C4:  SUBLW  03
02C6:  BNZ   02CA
....................                col=0;
02C8:  CLRF   07
....................           }
....................        }
....................       kbd_call_count=0;
02CA:  CLRF   04
....................    }
....................   set_tris_kbd(ALL_PINS);
02CC:  MOVLW  FE
02CE:  MOVWF  F95
....................   return(kchar);
02D0:  MOVFF  0B,01
02D4:  GOTO   0314 (RETURN)
.................... }
.................... 
.................... 
.................... #define LCD_DATA_PORT getenv("SFR:PORTB")   
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
00AA:  MOVLW  0F
00AC:  ANDWF  F93,W
00AE:  IORLW  F0
00B0:  MOVWF  F93
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
00B2:  BSF    F8A.2
....................    delay_cycles(1);
00B4:  NOP   
....................    lcd_output_enable(1);
00B6:  BSF    F8A.0
....................    delay_cycles(1);
00B8:  NOP   
....................    high = lcd_read_nibble();
00BA:  RCALL  009E
00BC:  MOVFF  01,15
....................       
....................    lcd_output_enable(0);
00C0:  BCF    F8A.0
....................    delay_cycles(1);
00C2:  NOP   
....................    lcd_output_enable(1);
00C4:  BSF    F8A.0
....................    delay_us(1);
00C6:  BRA    00C8
....................    low = lcd_read_nibble();
00C8:  RCALL  009E
00CA:  MOVFF  01,14
....................       
....................    lcd_output_enable(0);
00CE:  BCF    F8A.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
00D0:  MOVLW  0F
00D2:  ANDWF  F93,W
00D4:  MOVWF  F93
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00D6:  SWAPF  15,W
00D8:  MOVWF  00
00DA:  MOVLW  F0
00DC:  ANDWF  00,F
00DE:  MOVF   00,W
00E0:  IORWF  14,W
00E2:  MOVWF  01
00E4:  GOTO   00F2 (RETURN)
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
009E:  MOVF   F81,W
00A0:  MOVWF  00
00A2:  SWAPF  00,W
00A4:  ANDLW  0F
00A6:  MOVWF  01
....................   #endif
00A8:  RETURN 0
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0084:  SWAPF  15,W
0086:  ANDLW  F0
0088:  MOVWF  00
008A:  MOVLW  0F
008C:  ANDWF  F8A,W
008E:  IORWF  00,W
0090:  MOVWF  F8A
....................   #endif
....................       
....................    delay_cycles(1);
0092:  NOP   
....................    lcd_output_enable(1);
0094:  BSF    F8A.0
....................    delay_us(2);
0096:  BRA    0098
0098:  BRA    009A
....................    lcd_output_enable(0);
009A:  BCF    F8A.0
009C:  RETURN 0
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
00E8:  BCF    F93.0
....................    lcd_rs_tris();
00EA:  BCF    F93.1
....................    lcd_rw_tris();
00EC:  BCF    F93.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
00EE:  BCF    F8A.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
00F0:  BRA    00AA
00F2:  MOVFF  01,14
00F6:  BTFSC  01.7
00F8:  BRA    00F0
....................    lcd_output_rs(address);
00FA:  BCF    F8A.1
00FC:  BTFSC  12.0
00FE:  BSF    F8A.1
....................    delay_cycles(1);
0100:  NOP   
....................    lcd_output_rw(0);
0102:  BCF    F8A.2
....................    delay_cycles(1);
0104:  NOP   
....................    lcd_output_enable(0);
0106:  BCF    F8A.0
....................    lcd_send_nibble(n >> 4);
0108:  SWAPF  13,W
010A:  MOVWF  14
010C:  MOVLW  0F
010E:  ANDWF  14,F
0110:  MOVFF  14,15
0114:  RCALL  0084
....................    lcd_send_nibble(n & 0xf);
0116:  MOVF   13,W
0118:  ANDLW  0F
011A:  MOVWF  14
011C:  MOVWF  15
011E:  RCALL  0084
0120:  RETURN 0
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0122:  MOVLW  28
0124:  MOVWF  0C
0126:  MOVLW  0C
0128:  MOVWF  0D
012A:  MOVLW  01
012C:  MOVWF  0E
012E:  MOVLW  06
0130:  MOVWF  0F
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0132:  BCF    F8A.0
....................    lcd_output_rs(0);
0134:  BCF    F8A.1
....................    lcd_output_rw(0);
0136:  BCF    F8A.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0138:  MOVLW  0F
013A:  ANDWF  F93,W
013C:  MOVWF  F93
....................   #endif
....................    lcd_enable_tris();
013E:  BCF    F93.0
....................    lcd_rs_tris();
0140:  BCF    F93.1
....................    lcd_rw_tris();
0142:  BCF    F93.2
....................  #endif
....................     
....................    delay_ms(15);
0144:  MOVLW  0F
0146:  MOVWF  10
0148:  RCALL  005E
....................    for(i=1;i<=3;++i)
014A:  MOVLW  01
014C:  MOVWF  0B
014E:  MOVF   0B,W
0150:  SUBLW  03
0152:  BNC   0164
....................    {
....................        lcd_send_nibble(3);
0154:  MOVLW  03
0156:  MOVWF  15
0158:  RCALL  0084
....................        delay_ms(5);
015A:  MOVLW  05
015C:  MOVWF  10
015E:  RCALL  005E
0160:  INCF   0B,F
0162:  BRA    014E
....................    }
....................    
....................    lcd_send_nibble(2);
0164:  MOVLW  02
0166:  MOVWF  15
0168:  RCALL  0084
....................    delay_ms(5);
016A:  MOVLW  05
016C:  MOVWF  10
016E:  RCALL  005E
....................    for(i=0;i<=3;++i)
0170:  CLRF   0B
0172:  MOVF   0B,W
0174:  SUBLW  03
0176:  BNC   0192
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
0178:  CLRF   03
017A:  MOVF   0B,W
017C:  ADDLW  0C
017E:  MOVWF  FE9
0180:  MOVLW  00
0182:  ADDWFC 03,W
0184:  MOVWF  FEA
0186:  MOVFF  FEF,13
018A:  CLRF   12
018C:  RCALL  00E8
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
018E:  INCF   0B,F
0190:  BRA    0172
0192:  GOTO   0308 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
0196:  DECFSZ 0F,W
0198:  BRA    019C
019A:  BRA    01A2
....................       address=LCD_LINE_TWO;
019C:  MOVLW  40
019E:  MOVWF  10
01A0:  BRA    01A4
....................    else
....................       address=0;
01A2:  CLRF   10
....................      
....................    address+=x-1;
01A4:  MOVLW  01
01A6:  SUBWF  0E,W
01A8:  ADDWF  10,F
....................    lcd_send_byte(0,0x80|address);
01AA:  MOVF   10,W
01AC:  IORLW  80
01AE:  MOVWF  11
01B0:  CLRF   12
01B2:  MOVWF  13
01B4:  RCALL  00E8
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
01B6:  RETURN 0
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
01B8:  MOVF   0D,W
01BA:  XORLW  07
01BC:  BZ    01CC
01BE:  XORLW  0B
01C0:  BZ    01D6
01C2:  XORLW  06
01C4:  BZ    01E6
01C6:  XORLW  02
01C8:  BZ    01F2
01CA:  BRA    01FC
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
01CC:  MOVLW  01
01CE:  MOVWF  0E
01D0:  MOVWF  0F
01D2:  RCALL  0196
01D4:  BRA    0206
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
01D6:  CLRF   12
01D8:  MOVLW  01
01DA:  MOVWF  13
01DC:  RCALL  00E8
....................                      delay_ms(2);
01DE:  MOVLW  02
01E0:  MOVWF  10
01E2:  RCALL  005E
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
01E4:  BRA    0206
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
01E6:  MOVLW  01
01E8:  MOVWF  0E
01EA:  MOVLW  02
01EC:  MOVWF  0F
01EE:  RCALL  0196
01F0:  BRA    0206
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
01F2:  CLRF   12
01F4:  MOVLW  10
01F6:  MOVWF  13
01F8:  RCALL  00E8
01FA:  BRA    0206
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
01FC:  MOVLW  01
01FE:  MOVWF  12
0200:  MOVFF  0D,13
0204:  RCALL  00E8
....................      #endif
....................    }
0206:  RETURN 0
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... void main()
*
02D8:  CLRF   FF8
02DA:  BCF    FD0.7
02DC:  MOVLW  70
02DE:  MOVWF  FD3
02E0:  CLRF   F9B
02E2:  MOVF   FD3,W
02E4:  CLRF   09
02E6:  CLRF   08
02E8:  MOVF   FC1,W
02EA:  ANDLW  C0
02EC:  IORLW  0F
02EE:  MOVWF  FC1
02F0:  MOVLW  07
02F2:  MOVWF  FB4
02F4:  CLRF   04
02F6:  BCF    05.0
02F8:  CLRF   06
02FA:  CLRF   07
.................... {
.................... 	char k;
.................... 
.................... 	setup_adc_ports(NO_ANALOGS, VSS_VDD);
02FC:  MOVF   FC1,W
02FE:  ANDLW  C0
0300:  IORLW  0F
0302:  MOVWF  FC1
.................... 	kbd_init();
0304:  BRA    005A
.................... 
....................    lcd_init();
0306:  BRA    0122
.................... 
.................... 	lcd_putc("\fDigite uma tecla\n");
0308:  MOVLW  20
030A:  MOVWF  FF6
030C:  MOVLW  00
030E:  MOVWF  FF7
0310:  RCALL  0208
.................... 
.................... 	while(TRUE)
.................... 	{
.................... 
.................... 		//Example using external LCD
.................... 		k = kbd_getc();
0312:  BRA    0228
0314:  MOVFF  01,0A
.................... 		if(k!=0)
0318:  MOVF   0A,F
031A:  BZ    035E
.................... 			if(k=='*'){
031C:  MOVF   0A,W
031E:  SUBLW  2A
0320:  BNZ   0346
.................... 				lcd_putc("\fLimpando display\n");
0322:  MOVLW  34
0324:  MOVWF  FF6
0326:  MOVLW  00
0328:  MOVWF  FF7
032A:  RCALL  0208
.................... 				delay_ms(1000);
032C:  MOVLW  04
032E:  MOVWF  0B
0330:  MOVLW  FA
0332:  MOVWF  10
0334:  RCALL  005E
0336:  DECFSZ 0B,F
0338:  BRA    0330
.................... 				lcd_putc("\f");
033A:  MOVLW  48
033C:  MOVWF  FF6
033E:  MOVLW  00
0340:  MOVWF  FF7
0342:  RCALL  0208
.................... 				}
0344:  BRA    035E
.................... 			else if(k=='#')
0346:  MOVF   0A,W
0348:  SUBLW  23
034A:  BNZ   0358
.................... 				lcd_putc("\fTeclado CEFET\n");
034C:  MOVLW  4A
034E:  MOVWF  FF6
0350:  MOVLW  00
0352:  MOVWF  FF7
0354:  RCALL  0208
0356:  BRA    035E
.................... 			else
.................... 				lcd_putc(k);
0358:  MOVFF  0A,0D
035C:  RCALL  01B8
035E:  BRA    0312
.................... 
.................... 	}
.................... 
.................... }
0360:  SLEEP 

Configuration Fuses:
   Word  1: C800   INTRC_IO FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
