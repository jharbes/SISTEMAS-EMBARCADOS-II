CCS PCH C Compiler, Version 5.099, 54900               04-fev-22 20:03

               Filename:   C:\Users\wvair\Dropbox\CEFET\Sistemas de Informação 2021.2\Sistemas Embarcados 2\8-Aula  04FEV22 - Frequencímetro - RPM\Projeto Frequencímetro\FREQ.lst

               ROM used:   1364 bytes (4%)
                           Largest free fragment is 31400
               RAM used:   37 (2%) at main() level
                           60 (4%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0490
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   00AE
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... /////////////////////////////////////////////////////////////////////////
.................... ////                      PROJETO   FREQUENCÍMETRO                   ////
.................... /////////////////////////////////////////////////////////////////////////
.................... 
.................... #include "FREQ.h"
.................... #include <18F4520.h>
.................... //////////// Standard Header file for the PIC18F4520 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F4520
*
00C4:  DATA 20,46
00C6:  DATA 72,65
00C8:  DATA 71,75
00CA:  DATA 65,6E
00CC:  DATA 63,69
00CE:  DATA 6D,65
00D0:  DATA 74,72
00D2:  DATA 6F,20
00D4:  DATA 0A,00
00D6:  DATA 46,72
00D8:  DATA 65,71
00DA:  DATA 3A,25
00DC:  DATA 4C,55
00DE:  DATA 48,7A
00E0:  DATA 20,20
00E2:  DATA 20,20
00E4:  DATA 20,00
*
031C:  TBLRD*+
031E:  MOVF   FF5,F
0320:  BZ    033A
0322:  MOVFF  FF6,23
0326:  MOVFF  FF7,24
032A:  MOVFF  FF5,2F
032E:  RCALL  02CC
0330:  MOVFF  23,FF6
0334:  MOVFF  24,FF7
0338:  BRA    031C
033A:  GOTO   04DC (RETURN)
033E:  TBLRD*+
0340:  MOVFF  FF6,24
0344:  MOVFF  FF7,25
0348:  MOVFF  FF5,2F
034C:  RCALL  02CC
034E:  MOVFF  24,FF6
0352:  MOVFF  25,FF7
0356:  DECFSZ 23,F
0358:  BRA    033E
035A:  RETURN 0
035C:  BTFSC  FD8.1
035E:  BRA    0366
0360:  CLRF   FEA
0362:  MOVLW  37
0364:  MOVWF  FE9
0366:  CLRF   00
0368:  CLRF   01
036A:  CLRF   02
036C:  CLRF   03
036E:  CLRF   37
0370:  CLRF   38
0372:  CLRF   39
0374:  CLRF   3A
0376:  MOVF   36,W
0378:  IORWF  35,W
037A:  IORWF  34,W
037C:  IORWF  33,W
037E:  BZ    03D8
0380:  MOVLW  20
0382:  MOVWF  3B
0384:  BCF    FD8.0
0386:  RLCF   2F,F
0388:  RLCF   30,F
038A:  RLCF   31,F
038C:  RLCF   32,F
038E:  RLCF   37,F
0390:  RLCF   38,F
0392:  RLCF   39,F
0394:  RLCF   3A,F
0396:  MOVF   36,W
0398:  SUBWF  3A,W
039A:  BNZ   03AC
039C:  MOVF   35,W
039E:  SUBWF  39,W
03A0:  BNZ   03AC
03A2:  MOVF   34,W
03A4:  SUBWF  38,W
03A6:  BNZ   03AC
03A8:  MOVF   33,W
03AA:  SUBWF  37,W
03AC:  BNC   03CC
03AE:  MOVF   33,W
03B0:  SUBWF  37,F
03B2:  MOVF   34,W
03B4:  BTFSS  FD8.0
03B6:  INCFSZ 34,W
03B8:  SUBWF  38,F
03BA:  MOVF   35,W
03BC:  BTFSS  FD8.0
03BE:  INCFSZ 35,W
03C0:  SUBWF  39,F
03C2:  MOVF   36,W
03C4:  BTFSS  FD8.0
03C6:  INCFSZ 36,W
03C8:  SUBWF  3A,F
03CA:  BSF    FD8.0
03CC:  RLCF   00,F
03CE:  RLCF   01,F
03D0:  RLCF   02,F
03D2:  RLCF   03,F
03D4:  DECFSZ 3B,F
03D6:  BRA    0384
03D8:  MOVFF  37,FEF
03DC:  MOVFF  38,FEC
03E0:  MOVFF  39,FEC
03E4:  MOVFF  3A,FEC
03E8:  RETURN 0
03EA:  MOVF   FE9,W
03EC:  MOVWF  27
03EE:  MOVLW  3B
03F0:  MOVWF  2E
03F2:  MOVLW  9A
03F4:  MOVWF  2D
03F6:  MOVLW  CA
03F8:  MOVWF  2C
03FA:  CLRF   2B
03FC:  MOVLW  0A
03FE:  MOVWF  29
0400:  BSF    FD8.1
0402:  CLRF   FEA
0404:  MOVLW  23
0406:  MOVWF  FE9
0408:  MOVFF  26,32
040C:  MOVFF  25,31
0410:  MOVFF  24,30
0414:  MOVFF  23,2F
0418:  MOVFF  2E,36
041C:  MOVFF  2D,35
0420:  MOVFF  2C,34
0424:  MOVFF  2B,33
0428:  RCALL  035C
042A:  MOVF   01,W
042C:  MOVF   00,F
042E:  BNZ   044E
0430:  MOVF   29,W
0432:  XORLW  01
0434:  BZ    044E
0436:  MOVF   27,W
0438:  BZ    0450
043A:  ANDLW  0F
043C:  SUBWF  29,W
043E:  BZ    0442
0440:  BC    045A
0442:  BTFSC  27.7
0444:  BRA    045A
0446:  BTFSC  27.6
0448:  BRA    0450
044A:  MOVLW  20
044C:  BRA    0452
044E:  CLRF   27
0450:  MOVLW  30
0452:  ADDWF  00,F
0454:  MOVFF  00,2F
0458:  RCALL  02CC
045A:  BCF    FD8.1
045C:  MOVFF  2E,32
0460:  MOVFF  2D,31
0464:  MOVFF  2C,30
0468:  MOVFF  2B,2F
046C:  CLRF   36
046E:  CLRF   35
0470:  CLRF   34
0472:  MOVLW  0A
0474:  MOVWF  33
0476:  RCALL  035C
0478:  MOVFF  03,2E
047C:  MOVFF  02,2D
0480:  MOVFF  01,2C
0484:  MOVFF  00,2B
0488:  DECFSZ 29,F
048A:  BRA    0400
048C:  GOTO   0546 (RETURN)
.................... 
.................... #list
.................... 
.................... //#device adc=10
.................... 
.................... 
.................... #FUSES INTRC_IO                 //Internal RC Osc, no CLKOUT
.................... #FUSES MCLR										  // reset ativo
.................... 
.................... #use delay(int=4000000)
*
00E6:  CLRF   FEA
00E8:  MOVLW  30
00EA:  MOVWF  FE9
00EC:  MOVF   FEF,W
00EE:  BZ    010C
00F0:  MOVLW  01
00F2:  MOVWF  01
00F4:  CLRF   00
00F6:  DECFSZ 00,F
00F8:  BRA    00F6
00FA:  DECFSZ 01,F
00FC:  BRA    00F4
00FE:  MOVLW  4A
0100:  MOVWF  00
0102:  DECFSZ 00,F
0104:  BRA    0102
0106:  BRA    0108
0108:  DECFSZ FEF,F
010A:  BRA    00F0
010C:  RETURN 0
.................... 
.................... // acesso aos pinos:
.................... #define LCD_ENABLE_PIN  PIN_E1
.................... #define LCD_RS_PIN      PIN_E0
.................... #define LCD_RW_PIN      PIN_E2
.................... #define LCD_DATA4       PIN_D4
.................... #define LCD_DATA5       PIN_D5
.................... #define LCD_DATA6       PIN_D6
.................... #define LCD_DATA7       PIN_D7 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
019E:  BSF    F95.4
....................    output_float(LCD_DATA5);
01A0:  BSF    F95.5
....................    output_float(LCD_DATA6);
01A2:  BSF    F95.6
....................    output_float(LCD_DATA7);
01A4:  BSF    F95.7
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
01A6:  BSF    F8D.2
01A8:  BCF    F96.2
....................    delay_cycles(1);
01AA:  NOP   
....................    lcd_output_enable(1);
01AC:  BSF    F8D.1
01AE:  BCF    F96.1
....................    delay_cycles(1);
01B0:  NOP   
....................    high = lcd_read_nibble();
01B2:  RCALL  014C
01B4:  MOVFF  01,37
....................       
....................    lcd_output_enable(0);
01B8:  BCF    F8D.1
01BA:  BCF    F96.1
....................    delay_cycles(1);
01BC:  NOP   
....................    lcd_output_enable(1);
01BE:  BSF    F8D.1
01C0:  BCF    F96.1
....................    delay_us(1);
01C2:  NOP   
....................    low = lcd_read_nibble();
01C4:  RCALL  014C
01C6:  MOVFF  01,36
....................       
....................    lcd_output_enable(0);
01CA:  BCF    F8D.1
01CC:  BCF    F96.1
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
01CE:  BCF    F95.4
....................    output_drive(LCD_DATA5);
01D0:  BCF    F95.5
....................    output_drive(LCD_DATA6);
01D2:  BCF    F95.6
....................    output_drive(LCD_DATA7);
01D4:  BCF    F95.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
01D6:  SWAPF  37,W
01D8:  MOVWF  00
01DA:  MOVLW  F0
01DC:  ANDWF  00,F
01DE:  MOVF   00,W
01E0:  IORWF  36,W
01E2:  MOVWF  01
01E4:  GOTO   01F4 (RETURN)
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
014C:  CLRF   38
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
014E:  BSF    F95.4
0150:  MOVLW  00
0152:  BTFSC  F83.4
0154:  MOVLW  01
0156:  IORWF  38,F
....................    n |= input(LCD_DATA5) << 1;
0158:  BSF    F95.5
015A:  MOVLW  00
015C:  BTFSC  F83.5
015E:  MOVLW  01
0160:  MOVWF  00
0162:  BCF    FD8.0
0164:  RLCF   00,F
0166:  MOVF   00,W
0168:  IORWF  38,F
....................    n |= input(LCD_DATA6) << 2;
016A:  BSF    F95.6
016C:  MOVLW  00
016E:  BTFSC  F83.6
0170:  MOVLW  01
0172:  MOVWF  00
0174:  RLCF   00,F
0176:  RLCF   00,F
0178:  MOVLW  FC
017A:  ANDWF  00,F
017C:  MOVF   00,W
017E:  IORWF  38,F
....................    n |= input(LCD_DATA7) << 3;
0180:  BSF    F95.7
0182:  MOVLW  00
0184:  BTFSC  F83.7
0186:  MOVLW  01
0188:  MOVWF  00
018A:  RLCF   00,F
018C:  RLCF   00,F
018E:  RLCF   00,F
0190:  MOVLW  F8
0192:  ANDWF  00,F
0194:  MOVF   00,W
0196:  IORWF  38,F
....................    
....................    return(n);
0198:  MOVFF  38,01
....................   #else
019C:  RETURN 0
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
010E:  BTFSC  37.0
0110:  BRA    0116
0112:  BCF    F8C.4
0114:  BRA    0118
0116:  BSF    F8C.4
0118:  BCF    F95.4
....................    output_bit(LCD_DATA5, bit_test(n, 1));
011A:  BTFSC  37.1
011C:  BRA    0122
011E:  BCF    F8C.5
0120:  BRA    0124
0122:  BSF    F8C.5
0124:  BCF    F95.5
....................    output_bit(LCD_DATA6, bit_test(n, 2));
0126:  BTFSC  37.2
0128:  BRA    012E
012A:  BCF    F8C.6
012C:  BRA    0130
012E:  BSF    F8C.6
0130:  BCF    F95.6
....................    output_bit(LCD_DATA7, bit_test(n, 3));
0132:  BTFSC  37.3
0134:  BRA    013A
0136:  BCF    F8C.7
0138:  BRA    013C
013A:  BSF    F8C.7
013C:  BCF    F95.7
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
013E:  NOP   
....................    lcd_output_enable(1);
0140:  BSF    F8D.1
0142:  BCF    F96.1
....................    delay_us(2);
0144:  BRA    0146
....................    lcd_output_enable(0);
0146:  BCF    F8D.1
0148:  BCF    F96.1
014A:  RETURN 0
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
01E8:  BCF    F96.1
....................    lcd_rs_tris();
01EA:  BCF    F96.0
....................    lcd_rw_tris();
01EC:  BCF    F96.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
01EE:  BCF    F8D.0
01F0:  BCF    F96.0
....................    while ( bit_test(lcd_read_byte(),7) ) ;
01F2:  BRA    019E
01F4:  MOVFF  01,36
01F8:  BTFSC  01.7
01FA:  BRA    01F2
....................    lcd_output_rs(address);
01FC:  MOVF   34,F
01FE:  BNZ   0204
0200:  BCF    F8D.0
0202:  BRA    0206
0204:  BSF    F8D.0
0206:  BCF    F96.0
....................    delay_cycles(1);
0208:  NOP   
....................    lcd_output_rw(0);
020A:  BCF    F8D.2
020C:  BCF    F96.2
....................    delay_cycles(1);
020E:  NOP   
....................    lcd_output_enable(0);
0210:  BCF    F8D.1
0212:  BCF    F96.1
....................    lcd_send_nibble(n >> 4);
0214:  SWAPF  35,W
0216:  MOVWF  36
0218:  MOVLW  0F
021A:  ANDWF  36,F
021C:  MOVFF  36,37
0220:  RCALL  010E
....................    lcd_send_nibble(n & 0xf);
0222:  MOVF   35,W
0224:  ANDLW  0F
0226:  MOVWF  36
0228:  MOVWF  37
022A:  RCALL  010E
022C:  RETURN 0
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
022E:  MOVLW  28
0230:  MOVWF  24
0232:  MOVLW  0C
0234:  MOVWF  25
0236:  MOVLW  01
0238:  MOVWF  26
023A:  MOVLW  06
023C:  MOVWF  27
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
023E:  BCF    F8D.1
0240:  BCF    F96.1
....................    lcd_output_rs(0);
0242:  BCF    F8D.0
0244:  BCF    F96.0
....................    lcd_output_rw(0);
0246:  BCF    F8D.2
0248:  BCF    F96.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
024A:  BCF    F95.4
....................    output_drive(LCD_DATA5);
024C:  BCF    F95.5
....................    output_drive(LCD_DATA6);
024E:  BCF    F95.6
....................    output_drive(LCD_DATA7);
0250:  BCF    F95.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
0252:  BCF    F96.1
....................    lcd_rs_tris();
0254:  BCF    F96.0
....................    lcd_rw_tris();
0256:  BCF    F96.2
....................  #endif
....................     
....................    delay_ms(15);
0258:  MOVLW  0F
025A:  MOVWF  30
025C:  RCALL  00E6
....................    for(i=1;i<=3;++i)
025E:  MOVLW  01
0260:  MOVWF  23
0262:  MOVF   23,W
0264:  SUBLW  03
0266:  BNC   0278
....................    {
....................        lcd_send_nibble(3);
0268:  MOVLW  03
026A:  MOVWF  37
026C:  RCALL  010E
....................        delay_ms(5);
026E:  MOVLW  05
0270:  MOVWF  30
0272:  RCALL  00E6
0274:  INCF   23,F
0276:  BRA    0262
....................    }
....................    
....................    lcd_send_nibble(2);
0278:  MOVLW  02
027A:  MOVWF  37
027C:  RCALL  010E
....................    delay_ms(5);
027E:  MOVLW  05
0280:  MOVWF  30
0282:  RCALL  00E6
....................    for(i=0;i<=3;++i)
0284:  CLRF   23
0286:  MOVF   23,W
0288:  SUBLW  03
028A:  BNC   02A6
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
028C:  CLRF   03
028E:  MOVF   23,W
0290:  ADDLW  24
0292:  MOVWF  FE9
0294:  MOVLW  00
0296:  ADDWFC 03,W
0298:  MOVWF  FEA
029A:  MOVFF  FEF,35
029E:  CLRF   34
02A0:  RCALL  01E8
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
02A2:  INCF   23,F
02A4:  BRA    0286
02A6:  GOTO   04D2 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
02AA:  DECFSZ 31,W
02AC:  BRA    02B0
02AE:  BRA    02B6
....................       address=LCD_LINE_TWO;
02B0:  MOVLW  40
02B2:  MOVWF  32
02B4:  BRA    02B8
....................    else
....................       address=0;
02B6:  CLRF   32
....................      
....................    address+=x-1;
02B8:  MOVLW  01
02BA:  SUBWF  30,W
02BC:  ADDWF  32,F
....................    lcd_send_byte(0,0x80|address);
02BE:  MOVF   32,W
02C0:  IORLW  80
02C2:  MOVWF  33
02C4:  CLRF   34
02C6:  MOVWF  35
02C8:  RCALL  01E8
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
02CA:  RETURN 0
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
02CC:  MOVF   2F,W
02CE:  XORLW  07
02D0:  BZ    02E0
02D2:  XORLW  0B
02D4:  BZ    02EA
02D6:  XORLW  06
02D8:  BZ    02FA
02DA:  XORLW  02
02DC:  BZ    0306
02DE:  BRA    0310
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
02E0:  MOVLW  01
02E2:  MOVWF  30
02E4:  MOVWF  31
02E6:  RCALL  02AA
02E8:  BRA    031A
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
02EA:  CLRF   34
02EC:  MOVLW  01
02EE:  MOVWF  35
02F0:  RCALL  01E8
....................                      delay_ms(2);
02F2:  MOVLW  02
02F4:  MOVWF  30
02F6:  RCALL  00E6
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
02F8:  BRA    031A
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
02FA:  MOVLW  01
02FC:  MOVWF  30
02FE:  MOVLW  02
0300:  MOVWF  31
0302:  RCALL  02AA
0304:  BRA    031A
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0306:  CLRF   34
0308:  MOVLW  10
030A:  MOVWF  35
030C:  RCALL  01E8
030E:  BRA    031A
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0310:  MOVLW  01
0312:  MOVWF  34
0314:  MOVFF  2F,35
0318:  RCALL  01E8
....................      #endif
....................    }
031A:  RETURN 0
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... int32 freq=0;
.................... int32 overflow_timer0=0;
.................... 
.................... 	
.................... #INT_TIMER0 // 
.................... void  TIMER0_isr(void) 
.................... {
.................... overflow_timer0++;
*
00AE:  MOVLW  01
00B0:  ADDWF  1D,F
00B2:  BTFSC  FD8.0
00B4:  INCF   1E,F
00B6:  BTFSC  FD8.2
00B8:  INCF   1F,F
00BA:  BTFSC  FD8.2
00BC:  INCF   20,F
00BE:  BCF    FF2.2
00C0:  GOTO   0060
.................... }
.................... 
.................... 
.................... void main() {
*
0490:  CLRF   FF8
0492:  BCF    FD0.7
0494:  BSF    07.7
0496:  MOVLW  60
0498:  MOVWF  FD3
049A:  CLRF   F9B
049C:  MOVF   FD3,W
049E:  CLRF   1C
04A0:  CLRF   1B
04A2:  CLRF   1A
04A4:  CLRF   19
04A6:  CLRF   20
04A8:  CLRF   1F
04AA:  CLRF   1E
04AC:  CLRF   1D
04AE:  CLRF   22
04B0:  CLRF   21
04B2:  MOVF   FC1,W
04B4:  ANDLW  C0
04B6:  IORLW  0F
04B8:  MOVWF  FC1
04BA:  MOVLW  07
04BC:  MOVWF  FB4
.................... 
....................    setup_oscillator(OSC_4MHZ);  
04BE:  MOVLW  60
04C0:  MOVWF  FD3
04C2:  CLRF   F9B
04C4:  MOVF   FD3,W
....................   
....................   // Timer0 configurado como 16 bits (se fosse T0_8_BIT, seria 8 bits), veja abaixo
....................   // SETUP_TIMER_0(T0_EXT_L_TO_H | T0_DIV_1 | T0_8_BIT);
....................   // o que permite Timer0 conte até 65535 pulsos antes do overflow
....................   // Timer0 usará o Clock Externo, via pino 6 do PIC (T0CKI- Timer0 Clock Input)
....................   // que recebe os pulsos vindos do gerador 
....................    SETUP_TIMER_0(T0_EXT_L_TO_H | T0_DIV_1 );// clock EXT, conta na subida do clock, sem pre-divisão
04C6:  MOVLW  A8
04C8:  MOVWF  FD5
....................    
....................    enable_interrupts(INT_TIMER0);// habilita as interrupções de Timer0, as quais incrementam overflow_timer0
04CA:  BSF    FF2.5
....................   															// a cada 65536 pulsos do gerador
....................    enable_interrupts(GLOBAL);
04CC:  MOVLW  C0
04CE:  IORWF  FF2,F
.................... 
.................... 
....................    lcd_init();// inicializa o LCD
04D0:  BRA    022E
....................    lcd_putc(" Frequencimetro \n");// escreve no LCD a mensagem
04D2:  MOVLW  C4
04D4:  MOVWF  FF6
04D6:  MOVLW  00
04D8:  MOVWF  FF7
04DA:  BRA    031C
.................... 
....................    while (TRUE) {
....................     		  	 	
....................   		set_timer0(0);// inicializa o Timer0 com 0
04DC:  CLRF   FD7
04DE:  CLRF   FD6
04E0:  NOP   
....................   		overflow_timer0=0;// inicializa o overflow_timer0 com 0
04E2:  CLRF   20
04E4:  CLRF   1F
04E6:  CLRF   1E
04E8:  CLRF   1D
....................   		delay_ms(1000);// espera 1s enquanto o Timer0 conta os pulsos vindos do gerador de sinais
04EA:  MOVLW  04
04EC:  MOVWF  23
04EE:  MOVLW  FA
04F0:  MOVWF  30
04F2:  RCALL  00E6
04F4:  DECFSZ 23,F
04F6:  BRA    04EE
....................   		freq=(get_timer0() + 65536*overflow_timer0);// calcula quantos pulsos chegaram ao clock de Timer0
04F8:  MOVF   FD6,W
04FA:  MOVWF  23
04FC:  CLRF   00
04FE:  CLRF   01
0500:  MOVF   00,W
0502:  ADDWF  23,W
0504:  MOVWF  19
0506:  MOVF   01,W
0508:  ADDWFC FD7,W
050A:  MOVWF  1A
050C:  MOVLW  00
050E:  ADDWFC 1D,W
0510:  MOVWF  1B
0512:  MOVLW  00
0514:  ADDWFC 1E,W
0516:  MOVWF  1C
.................... 																								// incluindo o número de overflows multiplicado por 65536
.................... 																								// Por exemplo: se a frequência for 100kHz, em 1s de contagem, 
.................... 																								//  serão 100000 pulsos, o que irá provocar um overflow
.................... 																								// em Timer0, quando a contagem volta a zero, e continua contando.
.................... 																								// Após 1s de contagem, teremos 1 overflow e uma contagem em Timer0 de: 
.................... 																								// 100000 - 65536 = 34464. Ao se multiplicar o número de overflows
.................... 																								// por 65536 e se somar o conteúdo de Timer0, se contabilizam todos
.................... 																								// os pulsos ocorridos em 1s, o que é a expressão da frequência em Hz
.................... 																								 
....................       lcd_gotoxy(1,2);
0518:  MOVLW  01
051A:  MOVWF  30
051C:  MOVLW  02
051E:  MOVWF  31
0520:  RCALL  02AA
....................       printf(LCD_PUTC, "Freq:%LUHz     ",freq); // exibe o valor da frequência
0522:  MOVLW  D6
0524:  MOVWF  FF6
0526:  MOVLW  00
0528:  MOVWF  FF7
052A:  MOVLW  05
052C:  MOVWF  23
052E:  RCALL  033E
0530:  MOVLW  41
0532:  MOVWF  FE9
0534:  MOVFF  1C,26
0538:  MOVFF  1B,25
053C:  MOVFF  1A,24
0540:  MOVFF  19,23
0544:  BRA    03EA
0546:  MOVLW  DE
0548:  MOVWF  FF6
054A:  MOVLW  00
054C:  MOVWF  FF7
054E:  MOVLW  07
0550:  MOVWF  23
0552:  RCALL  033E
0554:  BRA    04DC
....................    }
.................... }
.................... 
0556:  SLEEP 

Configuration Fuses:
   Word  1: C800   INTRC_IO FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
